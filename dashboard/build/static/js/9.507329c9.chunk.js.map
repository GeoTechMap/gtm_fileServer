{"version":3,"sources":["views/charts/ChartLineSimple.js","views/charts/ChartBarSimple.js","views/widgets/WidgetsDropdown.js"],"names":["ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","labels","defaultProps","ChartBarSimple","barPercentage","categoryPercentage","WidgetsDropdown","useState","totalEssais","setTotalEssais","totalTypesEssais","setTotalTypesEssais","totalInstitutions","setTotalInstitutions","totalUtilisateurs","setTotalUtilisateurs","useEffect","fetch","process","then","response","json","catch","error","console","log","sm","lg","header","String","text"],"mappings":"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","file":"static/js/9.507329c9.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nconst ChartLineSimple = props => {\r\n\r\n  const {\r\n    borderColor,\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const pointHoverColor = (()=>{\r\n    if (pointHoverBackgroundColor) {\r\n      return pointHoverBackgroundColor\r\n    } else if (backgroundColor !== 'transparent') {\r\n      return backgroundColor\r\n    }\r\n    return borderColor\r\n  })()\r\n\r\n  const defaultDatasets = (()=>{\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        borderColor: getColor(borderColor),\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointBackgroundColor: getColor(pointHoverColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverColor),\r\n        label\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const pointedOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            offset: true,\r\n            gridLines: {\r\n              color: 'transparent',\r\n              zeroLineColor: 'transparent'\r\n            },\r\n            ticks: {\r\n              fontSize: 2,\r\n              fontColor: 'transparent'\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            display: false,\r\n            ticks: {\r\n              display: false,\r\n              min: Math.min.apply(Math, dataPoints) - 5,\r\n              max: Math.max.apply(Math, dataPoints) + 5\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 1\r\n        },\r\n        point: {\r\n          radius: 4,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const straightOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 2\r\n        },\r\n        point: {\r\n          radius: 0,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const defaultOptions = (()=>{\r\n    const options = pointed ? pointedOptions : straightOptions\r\n      return Object.assign({}, options, {\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n          display: false\r\n        }\r\n      })\r\n  })()\r\n\r\n  const computedDatasets = (() => {\r\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\r\n  })()\r\n\r\n  const computedOptions = (() => {\r\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\r\n  })()\r\n\r\n  // render\r\n\r\n  return (\r\n    <CChartLine\r\n      {...attributes}\r\n      datasets={computedDatasets}\r\n      options={computedOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartLineSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  borderColor: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartLineSimple.defaultProps = {\r\n  borderColor: 'rgba(255,255,255,.55)',\r\n  backgroundColor: 'transparent',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartLineSimple\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor } from '@coreui/utils'\r\nimport { CChartBar } from '@coreui/react-chartjs'\r\n\r\nconst ChartBarSimple = props => {\r\n\r\n  const {\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const defaultDatasets = (()=>{\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\r\n        label: label,\r\n        barPercentage: 0.5,\r\n        categoryPercentage: 1\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const defaultOptions = (()=>{\r\n    return {\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: false\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      }\r\n    }\r\n  })()\r\n\r\n  // render\r\n  return (\r\n    <CChartBar\r\n      {...attributes}\r\n      datasets={defaultDatasets}\r\n      options={defaultOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartBarSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartBarSimple.defaultProps = {\r\n  backgroundColor: 'rgba(0,0,0,.2)',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartBarSimple\r\n","import React, {useEffect, useState} from 'react'\r\nimport {\r\n  CWidgetDropdown,\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport ChartLineSimple from '../charts/ChartLineSimple'\r\nimport ChartBarSimple from '../charts/ChartBarSimple'\r\n\r\n\r\nconst WidgetsDropdown = () => {\r\n  \r\n  const [totalEssais, setTotalEssais] = useState(0);\r\n  const [totalTypesEssais, setTotalTypesEssais] = useState(0);\r\n  const [totalInstitutions, setTotalInstitutions] = useState(0);\r\n  const [totalUtilisateurs, setTotalUtilisateurs] = useState(0);\r\n\r\n  useEffect(() => {    \r\n    fetch(`${process.env.REACT_APP_API_URL}/api/essais/count`)\r\n      .then((response) => response.json())\r\n      .then((json) => setTotalEssais(json))\r\n      .catch((error) => {\r\n        console.log(error);\r\n      }); \r\n\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/count`)\r\n    .then((response) => response.json())\r\n    .then((json) => setTotalTypesEssais(json))\r\n    .catch((error) => {\r\n      console.log(error);\r\n    }); \r\n\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/institutions/count`)\r\n    .then((response) => response.json())\r\n    .then((json) => setTotalInstitutions(json))\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/utilisateurs/count`)\r\n    .then((response) => response.json())\r\n    .then((json) => setTotalUtilisateurs(json))\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n    \r\n  }, []);\r\n  // render\r\n  return (\r\n    <CRow>\r\n      <CCol sm=\"6\" lg=\"3\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-dark\"\r\n          header={String(totalEssais)}\r\n          text=\"Essais géotechniques\"\r\n        >\r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n      <CCol sm=\"6\" lg=\"3\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-dark\"\r\n          header={String(totalTypesEssais)}\r\n          text=\"Types d'éssai\"\r\n        >\r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n      <CCol sm=\"6\" lg=\"3\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-dark\"\r\n          header={String(totalInstitutions)}\r\n          text=\"Institutions\"\r\n        >\r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n      <CCol sm=\"6\" lg=\"3\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-dark\"\r\n          header={String(totalUtilisateurs)}\r\n          text=\"Opérateurs\"\r\n        >\r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n   </CRow>\r\n  )\r\n}\r\n\r\nexport default WidgetsDropdown\r\n"],"sourceRoot":""}