{"version":3,"sources":["views/commun/TextField.js","views/test_types/TestTypeForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","value","map","option","key","id","nom","component","style","position","color","fontSize","BasicForms","match","useState","show","setShow","showError","setShowError","useEffect","params","fetch","process","then","response","json","setDataForEdit","typeEssaiDto","dataForEdit","React","isActive","status","message","alert","validate","Yup","max","required","sigle","codeCouleur","description","errorMessage","setErrorMessage","loadingState","setLoadingState","initialValues","enableReinitialize","validationSchema","onSubmit","values","requestOptions","method","headers","UserService","getToken","body","JSON","stringify","res","console","log","catch","setTimeout","formik","closeButton","xs","sm","autoComplete","href","target","disabled","loading","size","lg","autohide","fade"],"mappings":"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","file":"static/js/16.daa67e70.chunk.js","sourcesContent":["import React from 'react';\nimport { CSelect} from '@coreui/react';\nimport { ErrorMessage, useField } from 'formik';\n\nexport const TextField = ({label, type, options, ...props}) => {\n    const [ field, meta] = useField(props);\n    return (\n        <div className=\"mb-2\" >\n            <label htmlFor={field.name}>{label}</label>\n            {type === \"textarea\" ?\n            <textarea \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            placeholder=\"Veuillez entrer la description...\"\n            rows=\"6\"\n            {...field} {...props}\n            ></textarea>:\n            type === \"select\" ?\n            <CSelect name={label}\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}>\n                <option  value={0}>Choisir</option>\n                 { options.map((option, key) => {              \n                    return <option key={key} value={option.id}>{option.nom}</option>\n                    })}      \n            </CSelect>:\n            type === \"selectString\" ?\n            <CSelect name={label}\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}>\n                <option  value={0}>Choisir</option>\n                 { options.map((option, key) => {              \n                    return <option key={key} value={option}>{option}</option>\n                    })}      \n            </CSelect>:\n        //     type == \"file\" ?\n        //     <CCol xs=\"12\" md=\"12\">\n        //      <CInputFile custom id=\"custom-file-input\" />\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\n        //     Choisir fichier...\n        //     </CLabel>\n        //     </CCol>\n        //    :\n            <input \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}\n            />\n            }\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\n            \n        </div>\n    )\n}","import React ,{useState, useEffect} from 'react'\nimport {Formik, Form} from 'formik';\nimport { TextField } from '../commun/TextField';\nimport * as Yup from 'yup';\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CFormText,\n  CRow,\n  CAlert,\n  CBadge,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n} from '@coreui/react';\nimport UserService from \"../../../src/services/UserService\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport axios from 'axios';\n\nconst BasicForms = ({match}) => {\n  //__toaster\n  const [show, setShow] = useState(false);\n  const [showError, setShowError] = useState(false);\n  //__end toaster\n\n  useEffect(() => {\n   if( match.params.id ){\n    fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`+match.params.id)\n      .then((response) => response.json())\n      .then((json) => setDataForEdit(json.typeEssaiDto))\n      \n   }\n  }, [match.params.id]);\n\n  const initVal ={\n    nom: '',\n    sigle:'',\n    codeCouleur:'0077FF',\n    description:'',\n  }\n  const [dataForEdit, setDataForEdit] = useState(null);\n  const [alert, setAlert] = React.useState({ \n    isActive: false, status: '', message: '',})\n\n  const validate = Yup.object({\n    nom: Yup.string()\n      .max(45,\"Maximum 45 caractères\")\n      .required(\"Champs obligatoire\"),\n    sigle: Yup.string()\n    .max(45,\"Maximum 45 caractères\"),\n    codeCouleur: Yup.string()\n    .max(6,\"Maximum 6 caractères\"),\n    description: Yup.string()\n      .max(255,\"Maximum 255 caractères\"),\n        \n  })\n\n  const [errorMessage, setErrorMessage] = useState('Echec du processus. Veuillez essayer ultérieurement !');\n  const [loadingState, setLoadingState] = useState(false);\n  \n  return (\n    <div>\n    <Formik\n      initialValues = {\n        dataForEdit || initVal\n      }\n      enableReinitialize\n      validationSchema= {validate}\n      onSubmit={values => {\n        setLoadingState(true);\n      //  console.log(values);\n\n  \n\n \n        const requestOptions = {\n          method: match.params.id ?'PUT':'POST',\n          headers: { 'Content-Type': 'application/json',\n          'Authorization': `Bearer ${UserService.getToken()}`,\n          \"Access-Control-Allow-Origin\" : \"*\", \n          \"Access-Control-Allow-Credentials\" : true  },\n          body: JSON.stringify(values)\n      };\n\n       //check if it is POST or PUT\n       if(match.params.id){\n        fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`+match.params.id, requestOptions)\n          .then(response => response.json())\n          .then((res) => {\n            if(res.message !=='success'){\n             console.log(res.message)\n             setErrorMessage(res.message);\n             setShowError(true)\n             setLoadingState(false);\n            }          \n             return res;\n           })\n          .then(() => setShow(true))\n          .then(() => setLoadingState(false))\n          .catch((error) => {\n            console.log(error);\n            setShowError(true)\n            setLoadingState(false);\n          })\n          // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n      }else{\n          fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`, requestOptions)\n          .then(response => response.json())\n          .then((res) => {\n           if(res.message !=='success'){\n            console.log(res.message)\n            setErrorMessage(res.message);\n            setShowError(true)\n            setLoadingState(false);\n           }          \n            return res;\n          })\n          .then(() => setShow(true))\n          .then(() => setLoadingState(false))\n          .catch((error) => {\n            console.log(error);\n            setShowError(true)\n            setLoadingState(false);\n          })\n          // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n        }\n \n        \n  setTimeout(() => {\n    setShow(false)\n    setShowError(false);\n  }, 3000)\n       \n            // setTimeout(() => {\n            //   setAlert({...alert, isActive: false, message:''})\n            // }, 4000)\n      }}\n    >\n      { formik => (\n        <div>\n       <Form>\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\n          <CRow>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur le type de d'essai   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>\n                      <CFormGroup>\n                          <TextField  label=\"Nom*:\" name=\"nom\" \n                          type=\"text\" placeholder=\"Entrer le nom du type d'essai...\"\n                           autoComplete=\"nom\"                       \n                           />\n                          <CFormText className=\"help-block\">Veillez entrer le nom du type d'essai</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Sigle:\" name=\"sigle\" type=\"text\" placeholder=\"Entrer l'abbréviation du type d'essai..\" autoComplete=\"sigle\"/>\n                        <CFormText className=\"help-block\">Veillez entrer l'abbréviation du type d'essai</CFormText>\n                      </CFormGroup> \n                    </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur le type d'essai   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>  \n                    <CFormGroup>\n                        <TextField label=\"Code couleur:\" name=\"codeCouleur\" type=\"text\" placeholder=\"Exemple: 0077FF\" autoComplete=\"codeCouleur\"/>\n                        <CFormText className=\"help-block\">Veillez entrer le code de couleur du marqueur en hexadécimal\n                         <a href=\"https://www.rapidtables.com/web/color/RGB_Color.html\" target=\"_blank\">(aide)</a></CFormText>\n                      </CFormGroup> \n                      <CFormGroup>\n                        <TextField label=\"Description:\" type=\"textarea\" name=\"description\"  placeholder=\"Entrer la description de téléphone...\" autoComplete=\"description\"/>\n                        <CFormText className=\"help-block\">Veillez entrer la description de l'institution</CFormText>\n                      </CFormGroup>      \n                    </CCardBody>\n                    <CCardFooter>\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\"\n                         disabled={loadingState}\n                         >{match.params.id ? 'Modifier': 'Enregistrer'} \n                      <ClipLoader loading={loadingState} size={15} />\n                     </button>\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset'>Réinitialiser</button>\n                    </CCardFooter>\n              </CCard>\n            </CCol>\n          </CRow>\n       </Form>\n        </div>    \n      )\n      }\n    </Formik>   \n    {/* SHOW SUCCES */}\n    <CCol sm=\"12\" lg=\"6\">\n    <CToaster\n      position={'top-right'}\n      > \n          <CToast\n            show={show}\n            autohide={true && 4000}\n            fade={true}\n          >\n            <CToastHeader closeButton={true}>\n            <CBadge className=\"mr-1\" color=\"success\">SUCCÈS</CBadge>              \n            </CToastHeader>\n            <CToastBody  color=\"success\">\n              Opération réussie !\n            </CToastBody>\n          </CToast>\n      </CToaster>\n    </CCol>\n\n    {/* SHOW ERROR */}\n    <CCol sm=\"12\" lg=\"6\">\n          <CToaster\n            position={'top-right'}\n          > \n                <CToast\n                  show={showError}\n                  autohide={true && 4000}\n                  fade={true}\n                >\n                  <CToastHeader closeButton={true}>\n                  <CBadge className=\"mr-1\" color=\"danger\">ECHEC</CBadge>              \n                  </CToastHeader>\n                  <CToastBody  color=\"danger\">\n                    {errorMessage}\n                  </CToastBody>\n                </CToast>\n          </CToaster>\n        </CCol>\n</div>\n  )\n}\nexport default BasicForms\n"],"sourceRoot":""}