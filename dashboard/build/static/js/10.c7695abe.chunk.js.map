{"version":3,"sources":["views/commun/TextField.js","views/essais/EssaiForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","value","map","option","key","id","nom","component","style","position","color","fontSize","BasicForms","match","useState","show","setShow","showError","setShowError","useContext","EssaiContext","globalData","useEffect","fetch","process","then","response","json","setAllTestTypes","UserService","getUsername","res","setAllInstitutions","institution","setAllDepartements","params","setDataForEdit","typeEssai","latitude","longitude","altitude","departement","commune","sectionCommunale","commentaire","code","dateRealisation","motsCles","pdf","idPosition","idFichier","fichier","nomFichier","setAncienNomDuFichier","hashNomFichier","setMyFile","myFile","file","format","size","capacite","data","method","headers","body","JSON","stringify","hashBase64","hashPdf","setDataForAPI","dataForAPI","base64File","setIsPDFPresent","catch","console","dataForAPIref","useRef","current","initVal","anncienNomDuFichier","dataForEdit","allTestTypes","allInstitutions","allDepartements","React","isActive","status","message","alert","validate","Yup","max","min","required","handleChange","event","currentTarget","files","target","callback","reader","FileReader","readAsDataURL","onload","result","onerror","log","getBase64","substr","indexOf","isPDFPresent","loadingState","setLoadingState","myRefname","initialValues","enableReinitialize","validationSchema","onSubmit","values","Promise","resolve","reject","concat","filter","item","toLowerCase","split","i","allItems","join","nomFichierASuprimmer","state","requestOptions","getToken","essaiSaved","essaiDto","base64","click","setTimeout","formik","closeButton","xs","sm","autoComplete","row","md","accept","onChange","variant","disabled","loading","ref","lg","autohide","fade"],"mappings":"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","file":"static/js/10.c7695abe.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CSelect} from '@coreui/react';\r\nimport { ErrorMessage, useField } from 'formik';\r\n\r\nexport const TextField = ({label, type, options, ...props}) => {\r\n    const [ field, meta] = useField(props);\r\n    return (\r\n        <div className=\"mb-2\" >\r\n            <label htmlFor={field.name}>{label}</label>\r\n            {type === \"textarea\" ?\r\n            <textarea \r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            placeholder=\"Veuillez entrer la description...\"\r\n            rows=\"6\"\r\n            {...field} {...props}\r\n            ></textarea>:\r\n            type === \"select\" ?\r\n            <CSelect name={label}\r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}>\r\n                <option  value={0}>Choisir</option>\r\n                 { options.map((option, key) => {              \r\n                    return <option key={key} value={option.id}>{option.nom}</option>\r\n                    })}      \r\n            </CSelect>:\r\n            type === \"selectString\" ?\r\n            <CSelect name={label}\r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}>\r\n                <option  value={0}>Choisir</option>\r\n                 { options.map((option, key) => {              \r\n                    return <option key={key} value={option}>{option}</option>\r\n                    })}      \r\n            </CSelect>:\r\n        //     type == \"file\" ?\r\n        //     <CCol xs=\"12\" md=\"12\">\r\n        //      <CInputFile custom id=\"custom-file-input\" />\r\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\r\n        //     Choisir fichier...\r\n        //     </CLabel>\r\n        //     </CCol>\r\n        //    :\r\n            type === \"date\" ?\r\n            <input type='date'\r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}\r\n            />:\r\n            <input \r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}\r\n            />\r\n            }\r\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\r\n            \r\n        </div>\r\n    )\r\n}","import React ,{useState, useEffect, useRef, useContext} from 'react'\r\nimport {Formik, Form} from 'formik';\r\nimport { TextField } from '../commun/TextField';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormGroup,\r\n  CFormText,\r\n  CRow,\r\n  CAlert,\r\n  CLabel,\r\n  CBadge,\r\n  CToast,\r\n  CToastBody,\r\n  CToastHeader,\r\n  CToaster,\r\n} from '@coreui/react';\r\nimport UserService from \"../../../src/services/UserService\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { EssaiContext } from \"../../EssaisContext\";\r\n\r\n\r\nconst BasicForms = ({match}) => {\r\n//__toaster\r\nconst [show, setShow] = useState(false);\r\nconst [showError, setShowError] = useState(false);\r\n//__end toaster\r\nconst [globalData, setGlobalData] = useContext(EssaiContext);\r\n\r\n  useEffect(() => {\r\n\r\n    //__START fetch all test types for the select field\r\n      fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`)\r\n        .then((response) => response.json())\r\n        .then((json) => {\r\n          setAllTestTypes(json)\r\n         return json;})\r\n\r\n      fetch(`${process.env.REACT_APP_API_URL}/api/utilisateurs/search?username=${UserService.getUsername()}`)\r\n      .then((response) => response.json())\r\n      .then((res)=> \r\n      setAllInstitutions([{\r\n        id: res.institution.id, \r\n        nom: res.institution.nom }])\r\n      )\r\n\r\n         setAllDepartements([\r\n           {id:'Artibonite',nom:'Artibonite'},\r\n           {id:'Centre',nom:'Centre'},\r\n           {id:'Grand\\'Anse',nom:'Grand\\'Anse'},\r\n           {id:'Nippes',nom:'Nippes'},\r\n           {id:'Nord',nom:'Nord'},\r\n           {id:'Nord-Est',nom:'Nord-Est'},\r\n           {id:'Nord-Ouest',nom:'Nord-Ouest'},\r\n           {id:'Ouest',nom:'Ouest'},\r\n           {id:'Sud-Est',nom:'Sud-Est'},\r\n           {id:'Sud',nom:'Sud'},\r\n         ])\r\n\r\n        //  .then((json) => setInitVal({...initVal,\r\n        //   typeEssai:json[0].id,\r\n        // }))\r\n    //__END fetch all test types for the select field\r\n\r\n    //__START fetch all test types for the select field\r\n      // fetch(`http://localhost:8080/api/institutions/`)\r\n      // .then((response) => response.json())\r\n      // .then((json) =>{ \r\n      //   setAllInstitutions(json)\r\n      //   return json;})\r\n\r\n\r\n\r\n      // setAllInstitutions([{\r\n      //   id: UserService.connectedUser ? UserService.connectedUser.institution.id : null, \r\n      //   nom: UserService.connectedUser ? UserService.connectedUser.institution.nom : null}])\r\n\r\n\r\n      // .then((json) => setInitVal({...initVal,\r\n      //   institution:json[0].id,\r\n      // }))\r\n    //__END fetch all test types for the select field\r\n\r\n   if( match.params.id ){\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/essais/`+match.params.id)\r\n      .then((response) => response.json())\r\n      .then((json) => { setDataForEdit({\r\n        id:json.id,\r\n        typeEssai:json.typeEssai.id,\r\n        institution:json.institution.id,\r\n        latitude:json.position.latitude,\r\n        longitude:json.position.longitude,\r\n        altitude:json.position.altitude,\r\n        departement:json.position.departement,\r\n        commune:json.position.commune,\r\n        sectionCommunale:json.position.sectionCommunale,\r\n        commentaire:json.commentaire,\r\n        code:json.code,\r\n        dateRealisation:json.dateRealisation,\r\n        motsCles:json.motsCles,\r\n        pdf:'',\r\n        //---------\r\n        idPosition:json.position.id,\r\n        idFichier:json.fichier.id,\r\n        nomFichier:json.fichier.nom\r\n      })\r\n      return json;})\r\n      .then((json)=>{\r\n        setAncienNomDuFichier(json.fichier.hashNomFichier)\r\n        return json;\r\n      })\r\n      .then((json)=>{ setMyFile({...myFile,\r\n        file:{\r\n          id:json.fichier.id,\r\n          name:json.fichier.nom,\r\n          type: json.fichier.format,\r\n          size:json.fichier.capacite\r\n        }\r\n        \r\n      })\r\n        return json;\r\n      })\r\n      .then(data =>   {\r\n        fetch(`${process.env.REACT_APP_FILE_SERVER_URL}/api/file/getfile`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json',\r\n            'Accept': 'application/json'},\r\n            body: JSON.stringify({\r\n                nomFichier: data.fichier.nom,\r\n                hashNomFichier: data.fichier.hashNomFichier,\r\n                hashBase64:data.fichier.hashPdf\r\n            })})\r\n            .then(res => res.json())\r\n            .then(res => {\r\n               setDataForAPI({...dataForAPI,\r\n             \r\n              pdf:res.base64File})\r\n              return res;\r\n            }\r\n           )\r\n           .then((json)=>{setMyFile({\r\n            file:{\r\n              id:data.fichier.id,\r\n              name:data.fichier.nom,\r\n              type: data.fichier.format,\r\n              size:data.fichier.capacite\r\n            }\r\n            \r\n          })})\r\n            .then(()=> setIsPDFPresent(true))\r\n            // .then(()=>console.log('-----------'+dataForAPI.pdf))\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n              });\r\n          return data;\r\n        })\r\n      \r\n   }\r\n  }, [match.params.id, dataForAPI, myFile,globalData]);\r\n\r\n\r\n  const [myFile, setMyFile] = useState({file:null});//for the file\r\n  // const onFileChange = event => {\r\n  //   // Update the state\r\n  //   setMyFile({file: event.target.files[0]}); \r\n  //   };\r\nconst init = {\r\n  typeEssai: {\r\n    id:null\r\n},\r\ninstitution: {\r\n    id:null\r\n},\r\nposition: {\r\n    id:null\r\n},\r\nfichier: {\r\n    id:null\r\n},\r\nmotsCles: '',\r\ncode:'',\r\npdf:''\r\n}\r\n\r\n  const [dataForAPI = init, setDataForAPI] = useState();\r\n  const dataForAPIref = useRef(dataForAPI);\r\n  useEffect(\r\n    () => { dataForAPIref.current = dataForAPI },\r\n    [dataForAPI]\r\n  )\r\n\r\n\r\n   const [initVal, setInitVal] = useState({\r\n    typeEssai:'',\r\n    institution:'',\r\n    latitude:'',\r\n    longitude:'',\r\n    altitude:'',\r\n    departement:'',\r\n    commune:'',\r\n    sectionCommunale:'',\r\n    commentaire:'',\r\n    code:'',\r\n    dateRealisation:'',\r\n    motsCles:'',\r\n    pdf:'',\r\n  });\r\n  const [anncienNomDuFichier, setAncienNomDuFichier] = useState('');\r\n  const [dataForEdit, setDataForEdit] = useState(null);\r\n  const [allTestTypes, setAllTestTypes] = useState([]);\r\n  const [allInstitutions, setAllInstitutions] = useState([]);\r\n  const [allDepartements, setAllDepartements] = useState([]);\r\n  const [alert, setAlert] = React.useState({ \r\n    isActive: false, status: '', message: '',})\r\n\r\n  const validate = Yup.object({\r\n    typeEssai: Yup.number()\r\n      .max(99999999,\"Maximum 45 caractères\")\r\n      .min(1,\"Faire un choix\")\r\n      .required(\"Champs obligatoire\"),\r\n    institution: Yup.number()\r\n      .max(99999999,\"Maximum 45 caractères\")\r\n      .min(1,\"Faire un choix\")\r\n      .required(\"Champs obligatoire\"),\r\n    latitude: Yup.number(\"Entrer un nombre\")\r\n      .min(17.5,\"Latitude situé en dehors d'Haïti\")\r\n      .max(21.0,\"Latitude situé en dehors d'Haïti\")\r\n      .required(\"Champs obligatoire\"),\r\n    longitude:  Yup.number(\"Entrer un nombre\")\r\n      .min(-75.0,\"Latitude situé en dehors d'Haïti\")\r\n      .max(-71.5,\"Latitude situé en dehors d'Haïti\")\r\n      .required(\"Champs obligatoire\"),\r\n    altitude:  Yup.number(\"Entrer un nombre\")\r\n      .max(99999999,\"Maximum 255 caractères\")\r\n      .required(\"Champs obligatoire\"),\r\n    commentaire: Yup.string()\r\n      .max(255,\"Maximum 255 caractères\"),\r\n    code: Yup.string()\r\n      .max(255,\"Maximum 255 caractères\"),\r\n    dateRealisation: Yup.string()\r\n      .max(20,\"Maximum 20 caractères\"),\r\n    motsCles: Yup.string()\r\n    .max(255,\"Maximum 255 caractères\"),\r\n    departement: Yup.string()\r\n    .max(255,\"Maximum 255 caractères\")\r\n    .required(\"Champs obligatoire\"),\r\n    // commune: Yup.string()\r\n    // .max(255,\"Maximum 255 caractères\")\r\n    // .required(\"Champs obligatoire\"),\r\n    // sectionCommunale: Yup.string()\r\n    // .max(255,\"Maximum 255 caractères\")\r\n    // .required(\"Champs obligatoire\"),\r\n\r\n  })\r\n  \r\n\r\nconst getBase64 = (file, callback) => {\r\n  let reader = new FileReader();\r\n  reader.readAsDataURL(file);\r\n  reader.onload = () => {\r\n    callback(reader.result);\r\n  };\r\n  reader.onerror = (error) => {\r\n    console.log(\"Error: \", error);\r\n  };\r\n};\r\n\r\nconst handleChange = (event) => {\r\n  const file = event.currentTarget.files[0];\r\n  if(file.size < 2000048){\r\n    if(file.type === 'application/pdf'){\r\n      setMyFile({file: event.target.files[0]});//for just getting the name outside of the function\r\n      getBase64(file, (result) => {\r\n        setDataForAPI({...dataForAPI, pdf:result.substr(result.indexOf(',') + 1)})\r\n     \r\n      });\r\n      setIsPDFPresent(true);\r\n    }else{\r\n      console.log('Must choose a PDF file')\r\n    }\r\n  }else{\r\n    console.log('Max file size is 2 MB')\r\n  }\r\n};\r\n\r\nconst [isPDFPresent, setIsPDFPresent] = useState(false);\r\nconst [loadingState, setLoadingState] = useState(false);\r\nconst myRefname= useRef(null);\r\n\r\n  return (\r\n    <div>\r\n    <Formik\r\n      initialValues = {\r\n        dataForEdit || initVal\r\n      }\r\n      enableReinitialize\r\n      validationSchema= {validate}\r\n      onSubmit={values => {\r\n        setLoadingState(true);\r\n        if(!isPDFPresent){//s'il n'y a aucun document\r\n          // alert('Noooooo')\r\n          console.log(\"no document\");\r\n          setLoadingState(false);\r\n        }else{\r\n        function first(){\r\n          return new Promise(function(resolve, reject){\r\n              // console.log(\"First\");\r\n              \r\n              // toBase64(myFile.file, (base64String)=>{\r\n              // })\r\n              resolve();\r\n          });\r\n      }\r\n      \r\n      function second(){\r\n          return new Promise(function(resolve, reject){\r\n              // console.log(\"Second\");\r\n             \r\n              setDataForAPI({\r\n                id:match.params.id ? dataForEdit.id : null,\r\n                typeEssai: {\r\n                  id:values.typeEssai\r\n              },\r\n              institution: {\r\n                  id:values.institution\r\n              },\r\n              position: {\r\n                  id: match.params.id ? dataForEdit.idPosition : null,\r\n                  latitude:values.latitude,\r\n                  longitude:values.longitude,\r\n                  altitude:values.altitude,\r\n                  departement:values.departement,\r\n                  // commune:values.commune,\r\n                  // sectionCommunale:values.sectionCommunale\r\n              },\r\n              fichier: {\r\n                  id:match.params.id ? dataForEdit.idFichier : null,\r\n                  nom:myFile.file.name,\r\n                  format: myFile.file.type,\r\n                  capacite:myFile.file.size\r\n              },\r\n              commentaire:values.commentaire,\r\n              code:values.code,\r\n              dateRealisation:values.dateRealisation,\r\n              motsCles: (\r\n                    (values.motsCles.concat(' '+ values.departement)\r\n                  //concater les mots cles avec le type d'essai\r\n                  .concat(' '+ \r\n                    //get nom of selected type essai\r\n                    ((allTestTypes.filter( item => item.id == values.typeEssai))[0]).nom\r\n                    )\r\n                  //concater les mots cles avec le type d'essai\r\n                  .concat(' '+ \r\n                  //get nom of selected type essai\r\n                  ((allInstitutions.filter( item => item.id == values.institution))[0]).nom\r\n                  )\r\n                    ).toLowerCase()\r\n              // on enlève les duplications\r\n              .split(' ').filter(function(item,i,allItems){\r\n                    return i==allItems.indexOf(item);\r\n                }).join(' ')\r\n              ),\r\n              pdf:dataForAPI.pdf,\r\n              nomFichierASuprimmer:anncienNomDuFichier\r\n            })\r\n            setDataForAPI((state) => {\r\n              // console.log(state); // \"React is awesome!\"\r\n              \r\n              return state;\r\n            });\r\n            \r\n              resolve();\r\n          });\r\n      }\r\n      \r\n      function third(){\r\n        // console.log(dataForAPI)\r\n          return new Promise(function(resolve, reject){\r\n              // console.log(\"Third\");\r\n              const requestOptions = {\r\n                method: match.params.id ?'PUT':'POST',\r\n                headers: { 'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'Authorization': `Bearer ${UserService.getToken()}`},\r\n                body: JSON.stringify(dataForAPIref.current)\r\n            };\r\n            console.log(dataForAPIref.current)\r\n            //check if it is POST or PUT\r\n            if(match.params.id){//_______________PUT RESQUEST________________\r\n              fetch(`${process.env.REACT_APP_API_URL}/api/essais/`+match.params.id, requestOptions)\r\n                .then(response => response.json())\r\n                .then( essaiSaved => {\r\n                  fetch(`${process.env.REACT_APP_FILE_SERVER_URL}/api/file`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'},\r\n                    body: JSON.stringify({\r\n                      hashNomFichier: essaiSaved.essaiDto.fichier.hashNomFichier,\r\n                      nomFichierASuprimmer:anncienNomDuFichier,\r\n                      base64: dataForAPI.pdf\r\n                    })})\r\n                    // .then(res => console.log(res))\r\n                    \r\n                  }\r\n                  )\r\n                  .then(() => setShow(true))\r\n                  .then(() => setLoadingState(false))\r\n                //.then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}))\r\n                .catch((error) => {\r\n                  console.log(error);\r\n                  setShowError(true);\r\n                  setLoadingState(false);\r\n                })\r\n            }else{//_______________POST RESQUEST________________\r\n              // console.log(requestOptions.body)\r\n                fetch(`${process.env.REACT_APP_API_URL}/api/essais`, requestOptions)\r\n                .then(response => response.json())//to the app server\r\n                .then( essaiSaved => {\r\n                  fetch(`${process.env.REACT_APP_FILE_SERVER_URL}/api/file`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'},\r\n                    body: JSON.stringify({\r\n                      hashNomFichier: essaiSaved.essaiDto.fichier.hashNomFichier,\r\n                      nomFichierASuprimmer:\"\",//We dont delete any old doc\r\n                      base64: dataForAPI.pdf\r\n                    })})\r\n                    // .then(res => console.log(res))\r\n                  }\r\n                  )\r\n                  .then(()=> myRefname.current.click())\r\n                  .then(() => setShow(true))\r\n                  .then(() => setLoadingState(false))\r\n               // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}))\r\n               .catch((error) => {\r\n                console.log(error);\r\n                setShowError(true);\r\n                setLoadingState(false);\r\n              })\r\n                // fetch(`${process.env.REACT_APP_API_URL}/api/essais`,\r\n                //   {\r\n                //     method: 'POST',\r\n                //     body: values,\r\n                //   }\r\n                // )\r\n                // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}))\r\n                // .catch((error) => {\r\n                //   console.error('Error:', error);\r\n                // });\r\n              }\r\n              resolve();\r\n          });\r\n      }\r\n\r\n      first()\r\n      .then(second)\r\n      .then(third);\r\n\r\n\r\n\r\n      setTimeout(() => {\r\n        setShow(false);\r\n        setShowError(false);\r\n      }, 3000)\r\n            // setTimeout(() => {\r\n            //   setAlert({...alert, isActive: false, message:''})\r\n            // }, 4000)\r\n      }\r\n      }\r\n    }\r\n    >\r\n      { formik => (\r\n        <div>\r\n       <Form>\r\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\r\n          <CRow>\r\n            <CCol xs=\"12\" sm=\"6\">\r\n              <CCard>\r\n                  <CCardHeader>\r\n                  Informations sur l'essai   {  match.params.id}\r\n                 </CCardHeader>\r\n                    <CCardBody>\r\n                      <CFormGroup>\r\n                          <TextField  label=\"Type d'essai*:\" name=\"typeEssai\" \r\n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer le type d'essai...\"/>\r\n                          <CFormText className=\"help-block\">Veuillez entrer le type d'essai</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Institution*:\" name=\"institution\" \r\n                         type=\"select\" options={allInstitutions} placeholder=\"Entrer l'institution\" />\r\n                        <CFormText className=\"help-block\">Veuillez entrer l'institution</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Latitude*:\" name=\"latitude\" \r\n                        type=\"text\" placeholder=\"Entrer la latitude\" autoComplete=\"latitude\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer la latitude (ex: 18.54)</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Longitude*:\" name=\"longitude\" \r\n                        type=\"text\" placeholder=\"Entrer la longitude\" autoComplete=\"longitude\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer la longitude (ex: -72.68)</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Altitude*:\" name=\"altitude\" \r\n                        type=\"text\" placeholder=\"Entrer l'altitude\" autoComplete=\"altitude\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer l'altitude (ex: 45)</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                          <TextField  label=\"Département*:\" name=\"departement\" \r\n                          type=\"select\" options={allDepartements} placeholder=\"Entrer le département de l'essai...\"/>\r\n                          <CFormText className=\"help-block\">Veuillez entrer le département de l'essai</CFormText>\r\n                      </CFormGroup>\r\n                    </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n            <CCol xs=\"12\" sm=\"6\">\r\n              <CCard>\r\n                  <CCardHeader>\r\n                  Informations sur l'essai   {  match.params.id}\r\n                 </CCardHeader>\r\n                    <CCardBody>  \r\n                    {/* <CFormGroup>\r\n                          <TextField  label=\"Commune*:\" name=\"commune\" \r\n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer la commune de l'essai...\"/>\r\n                          <CFormText className=\"help-block\">Veuillez entrer la commune de l'essai</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                          <TextField  label=\"Section communale*:\" name=\"sectionCommunale\" \r\n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer la section communale de l'essai...\"/>\r\n                          <CFormText className=\"help-block\">Veuillez entrer la section communale de l'essai</CFormText>\r\n                      </CFormGroup> */}\r\n                      <CFormGroup>\r\n                        <TextField label=\"Date de réalisation: (jj/mm/aaaa)\" name=\"dateRealisation\" \r\n                        type=\"date\" />\r\n                        <CFormText className=\"help-block\">Veuillez entrer la date de réalisation de l'essai (format: Jour/Mois/Année)</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Code de l'essai:\" name=\"code\" \r\n                        type=\"text\" placeholder=\"Entrer le code de l'essai\" autoComplete=\"code\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer le code de l'essai</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Mots clés:\" name=\"motsCles\" \r\n                        type=\"textarea\" placeholder=\"Entrer les mots clés\" autoComplete=\"motsCles\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer les mots clés</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Commentaires:\" name=\"commentaire\" \r\n                        type=\"textarea\" placeholder=\"Entrer les commentaires\" autoComplete=\"commentaire\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer un commentaire</CFormText>\r\n                      </CFormGroup>\r\n                      {/* <CFormGroup >\r\n                        <TextField label=\"Fichier:\" name=\"fichier\" \r\n                        type=\"file\" placeholder=\"Entrer le fichier\" autoComplete=\"fichier\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer le fichier (Max: 2 MB)</CFormText>\r\n                      </CFormGroup>  */}\r\n                      <CFormGroup row>{}\r\n                      <CCol xs=\"12\" md=\"12\">\r\n                        <input  id=\"custom-file-input\" \r\n                        // onChange={onFileChange}\r\n                        type=\"file\" \r\n                        accept=\"application/pdf\"     \r\n                        onChange={(event) => handleChange(event)}\r\n                          />\r\n                        <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\r\n                           {myFile.file ? myFile.file.name:'Choisir un fichier...'}\r\n                        </CLabel>\r\n                      </CCol>\r\n                    </CFormGroup> \r\n                    {!dataForEdit && !isPDFPresent ? \r\n                      <CFormGroup row>\r\n                      <CCol xs=\"12\" md=\"12\"> \r\n                      <CFormText className=\"help-block\"><span style={{color:'red'}}>Choisir un PDF (Max 2MB)*</span></CFormText>\r\n                      </CCol>\r\n                    </CFormGroup>  \r\n                    : ''}   \r\n                     \r\n                    </CCardBody>\r\n                    \r\n                    {dataForEdit ? \r\n                    <CFormGroup row>\r\n                      <CCol xs=\"12\" md=\"12\"> \r\n                      <CFormText className=\"help-block\"> Ancien PDF:  {dataForEdit ? dataForEdit.nomFichier :''}</CFormText>\r\n                      </CCol>\r\n                    </CFormGroup>   :''}\r\n                     \r\n                    <CCardFooter>\r\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\"\r\n                       disabled={loadingState}\r\n                       >{match.params.id ? 'Modifier': 'Enregistrer'}\r\n                      <ClipLoader loading={loadingState} size={15} />\r\n                      </button>\r\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset' ref={myRefname}>Réinitialiser</button>\r\n                    </CCardFooter>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n       </Form>\r\n        </div>    \r\n      )\r\n      }\r\n    </Formik> \r\n\r\n      {/* SHOW SUCCES */} \r\n      <CCol sm=\"12\" lg=\"6\">\r\n        <CToaster\r\n          position={'top-right'}\r\n        > \r\n              <CToast\r\n                show={show}\r\n                autohide={true && 4000}\r\n                fade={true}\r\n              >\r\n                <CToastHeader closeButton={true}>\r\n                <CBadge className=\"mr-1\" color=\"success\">SUCCÈS</CBadge>              \r\n                </CToastHeader>\r\n                <CToastBody  color=\"success\">\r\n                  Opération réussie !\r\n                </CToastBody>\r\n              </CToast>\r\n        </CToaster>\r\n      </CCol>\r\n\r\n      {/* SHOW ERROR */}\r\n      <CCol sm=\"12\" lg=\"6\">\r\n      <CToaster\r\n        position={'top-right'}\r\n      > \r\n            <CToast\r\n              show={showError}\r\n              autohide={true && 4000}\r\n              fade={true}\r\n            >\r\n              <CToastHeader closeButton={true}>\r\n              <CBadge className=\"mr-1\" color=\"danger\">ECHEC</CBadge>              \r\n              </CToastHeader>\r\n              <CToastBody  color=\"success\">\r\n                Echec de l'opération. Veuillez essayer plus tard !\r\n              </CToastBody>\r\n            </CToast>\r\n      </CToaster>\r\n    </CCol>\r\n </div> \r\n  )\r\n}\r\nexport default BasicForms\r\n"],"sourceRoot":""}