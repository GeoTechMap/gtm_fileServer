{"version":3,"sources":["views/commun/TextField.js","views/users/UserForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","value","map","option","key","id","nom","component","style","position","color","fontSize","UserForm","match","useState","show","setShow","showError","setShowError","useEffect","fetch","process","then","response","json","setAllKeycloalUserWithoutProfile","setAllInstitutions","params","setDataForEdit","utilisateurDto","prenom","username","email","adresse","telephone","institution","allKeycloalUserWithoutProfile","allInstitutions","dataForEdit","React","isActive","status","message","alert","validate","Yup","max","min","required","loadingState","setLoadingState","initialValues","enableReinitialize","validationSchema","onSubmit","values","requestOptions","method","headers","UserService","getToken","body","JSON","stringify","idKeycloak","catch","console","log","setTimeout","window","location","reload","formik","closeButton","xs","sm","autoComplete","disabled","loading","size","lg","autohide","fade"],"mappings":"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","file":"static/js/14.5b299514.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CSelect} from '@coreui/react';\r\nimport { ErrorMessage, useField } from 'formik';\r\n\r\nexport const TextField = ({label, type, options, ...props}) => {\r\n    const [ field, meta] = useField(props);\r\n    return (\r\n        <div className=\"mb-2\" >\r\n            <label htmlFor={field.name}>{label}</label>\r\n            {type === \"textarea\" ?\r\n            <textarea \r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            placeholder=\"Veuillez entrer la description...\"\r\n            rows=\"6\"\r\n            {...field} {...props}\r\n            ></textarea>:\r\n            type === \"select\" ?\r\n            <CSelect name={label}\r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}>\r\n                <option  value={0}>Choisir</option>\r\n                 { options.map((option, key) => {              \r\n                    return <option key={key} value={option.id}>{option.nom}</option>\r\n                    })}      \r\n            </CSelect>:\r\n            type === \"selectString\" ?\r\n            <CSelect name={label}\r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}>\r\n                <option  value={0}>Choisir</option>\r\n                 { options.map((option, key) => {              \r\n                    return <option key={key} value={option}>{option}</option>\r\n                    })}      \r\n            </CSelect>:\r\n        //     type == \"file\" ?\r\n        //     <CCol xs=\"12\" md=\"12\">\r\n        //      <CInputFile custom id=\"custom-file-input\" />\r\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\r\n        //     Choisir fichier...\r\n        //     </CLabel>\r\n        //     </CCol>\r\n        //    :\r\n            <input \r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}\r\n            />\r\n            }\r\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\r\n            \r\n        </div>\r\n    )\r\n}","import React ,{useState, useEffect, useRef} from 'react'\r\nimport {Formik, Form} from 'formik';\r\nimport { TextField } from '../commun/TextField';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormGroup,\r\n  CFormText,\r\n  CRow,\r\n  CAlert,\r\n  CBadge,\r\n  CToast,\r\n  CToastBody,\r\n  CToastHeader,\r\n  CToaster,\r\n} from '@coreui/react'\r\nimport UserService from \"../../../src/services/UserService\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nconst UserForm = ({match}) => {\r\n  //__toaster\r\n  const [show, setShow] = useState(false);\r\n  const [showError, setShowError] = useState(false);\r\n  //__end toaster\r\n\r\n  useEffect(() => {\r\n    //__START fetch all test types for the select field\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/keycloakusers/`)\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n    setAllKeycloalUserWithoutProfile(json)\r\n    return json;})\r\n//__END fetch all test types for the select field\r\n    //__START fetch all test types for the select field\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/institutions/`)\r\n    .then((response) => response.json())\r\n    .then((json) =>{ \r\n      setAllInstitutions(json)\r\n      return json;})\r\n//__END fetch all test types for the select field\r\n\r\n   if( match.params.id ){\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/utilisateurs/`+match.params.id)\r\n      .then((response) => response.json())\r\n      .then((json) => setDataForEdit(\r\n        {\r\n          nom: json.utilisateurDto.nom,\r\n          prenom:json.utilisateurDto.prenom,\r\n          username:json.utilisateurDto.username,\r\n          email:json.utilisateurDto.email,\r\n          adresse:json.utilisateurDto.adresse,\r\n          telephone:json.utilisateurDto.telephone,\r\n          institution:json.utilisateurDto.institution.id,\r\n        }))\r\n      \r\n   }\r\n  }, [match.params.id]);\r\n\r\n  const initVal ={\r\n    nom: '',\r\n    prenom:'',\r\n    username:'',\r\n    email:'',\r\n    adresse:'',\r\n    telephone:'',\r\n    institution:'',\r\n  }\r\n  const [allKeycloalUserWithoutProfile, setAllKeycloalUserWithoutProfile] = useState([]);\r\n  const [allInstitutions, setAllInstitutions] = useState([]);\r\n  const [dataForEdit, setDataForEdit] = useState(null);\r\n  const [alert, setAlert] = React.useState({ \r\n    isActive: false, status: '', message: '',})\r\n\r\nconst init ={\r\n    nom: '',\r\n    prenom:'',\r\n    username:'',\r\n    email:'',\r\n    adresse:'',\r\n    telephone:'',\r\n    institution: {\r\n        id:null\r\n    },\r\n    }\r\nconst [dataForAPI = init, setDataForAPI] = useState();\r\n\r\n  const validate = Yup.object({\r\n    nom: Yup.string()\r\n    .max(100,\"Maximum 100 caractères\")\r\n    .min(3,\"3 caractères au minimum\")\r\n    .required(\"Champs obligatire\"),\r\n    prenom: Yup.string()\r\n    .max(45,\"Maximum 45 caractères\")\r\n    .min(3,\"3 caractères au minimum\"),\r\n    adresse: Yup.string()\r\n    .max(45,\"Maximum 45 caractères\")\r\n    .min(3,\"3 caractères au minimum\")\r\n    .required(\"Champs obligatire\"),\r\n    telephone: Yup.string()\r\n      .max(15,\"Maximum 15 caractères\")\r\n      .min(3,\"3 caractères au minimum\")\r\n      .required(\"Champs obligatire\"),\r\n    email: Yup.string()\r\n      .email(\"Email invalide\")\r\n      .required(\"Champs obligatire\"),\r\n    username: Yup.string()\r\n      .max(45,\"Maximum 45 caractères\")\r\n      .min(1,\"Faire un choix\")\r\n      .required(\"Champs obligatoire\"),\r\n    institution: Yup.number()\r\n      .min(1,\"Faire un choix\")\r\n      .required(\"Champs obligatoire\"),\r\n        \r\n  })\r\n  \r\n  const [loadingState, setLoadingState] = useState(false);\r\n  \r\n  return (\r\n    <div>\r\n    <Formik\r\n      initialValues = {\r\n        dataForEdit || initVal\r\n      }\r\n      enableReinitialize\r\n      validationSchema= {validate}\r\n      onSubmit={values => {\r\n        setLoadingState(true);\r\n                const requestOptions = {\r\n                    method: match.params.id ?'PUT':'POST',\r\n                    headers: { 'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${UserService.getToken()}`},\r\n                    body: JSON.stringify( {\r\n                        id:match.params.id ? dataForEdit.id : null,\r\n                        nom:values.nom,\r\n                        idKeycloak:'plplp',\r\n                        prenom:values.prenom,\r\n                        adresse:values.adresse,\r\n                        telephone:values.telephone,\r\n                        email:values.email,\r\n                        username:values.username,\r\n                        institution:{\r\n                            id:values.institution\r\n                        }\r\n                    })\r\n\r\n                };\r\n                  //check if it is POST or PUT\r\n        if(match.params.id){\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/utilisateurs/`+match.params.id, requestOptions)\r\n              .then(response => response.json())//to do:TEST IF SUCCES first\r\n              .then(() => setShow(true))\r\n              .then(() => setLoadingState(false))\r\n              .catch((error) => {\r\n                console.log(error);\r\n                setShowError(true);\r\n                setLoadingState(false);\r\n              })\r\n              // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\r\n          }else{\r\n              fetch(`${process.env.REACT_APP_API_URL}/api/utilisateurs/`, requestOptions)\r\n              .then(response => response.json())\r\n              // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\r\n              .then(() => setShow(true))\r\n              .then(() => setLoadingState(false))\r\n              .then(() => \r\n              setTimeout(() => {\r\n                window.location.reload()\r\n              }, 3000))\r\n              .catch((error) => {\r\n                console.log(error);\r\n                setShowError(true)\r\n                setLoadingState(false);\r\n              })\r\n            }\r\n              \r\n        \r\n      \r\n\r\n            setTimeout(() => {\r\n              setShow(false);\r\n              setShowError(false);\r\n            }, 3000)\r\n      }}\r\n    >\r\n      { formik => (\r\n        <div>\r\n       <Form>\r\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\r\n       <CRow>\r\n            <CCol xs=\"12\" sm=\"6\">\r\n              <CCard>\r\n                  <CCardHeader>\r\n                  Informations sur l'utilisateur   {  match.params.id}\r\n                 </CCardHeader>\r\n                    <CCardBody>\r\n                      <CFormGroup>\r\n                          <TextField label=\"Nom*:\" name=\"nom\" \r\n                          type=\"text\" placeholder=\"Entrer le nom de l'utilisateur...\" \r\n                          autoComplete=\"nom\" \r\n                          />\r\n                          <CFormText className=\"help-block\">Veuillez entrer le nom de l'utilisateur</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                          <TextField label=\"Prénom:\" name=\"prenom\" \r\n                          type=\"text\" placeholder=\"Entrer le prénom de l'utilisateur...\" \r\n                          autoComplete=\"sigle\" \r\n                          />\r\n                          <CFormText className=\"help-block\">Veuillez entrer le prénom de l'utilisateur</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Adresse*:\" name=\"adresse\" type=\"text\" placeholder=\"Entrer l'adresse de l'institution..\" autoComplete=\"adresse\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer l'adresse de l'utilisateur</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Téléphone:\" name=\"telephone\" type=\"text\" placeholder=\"Entrer un numéro de téléphone...\" autoComplete=\"telephone1\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer le numéro de téléphone de l'utilisateur</CFormText>\r\n                      </CFormGroup>\r\n                    </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n            <CCol xs=\"12\" sm=\"6\">\r\n              <CCard> \r\n                  <CCardHeader>\r\n                  Informations sur l'utilisateur   {  match.params.id}\r\n                 </CCardHeader>\r\n                    <CCardBody>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Email*:\" name=\"email\" type=\"text\" placeholder=\"Enter l'email de l'utilisateur...\" autoComplete=\"email\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer l'email de l'utilisateur</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                          <TextField  label=\"Nom d'utilisateur*:\" name=\"username\" \r\n                          type=\"selectString\" options={allKeycloalUserWithoutProfile}/>\r\n                          <CFormText className=\"help-block\">Veuillez choisir le nom d'utilisateur</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Institution*:\" name=\"institution\" \r\n                         type=\"select\" options={allInstitutions} placeholder=\"Entrer l'institution\" />\r\n                        <CFormText className=\"help-block\">Veuillez entrer l'institution</CFormText>\r\n                      </CFormGroup>\r\n                    </CCardBody>\r\n                    <CCardFooter>\r\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\"\r\n                         disabled={loadingState}\r\n                         >{match.params.id ? 'Modifier': 'Enregistrer'} \r\n                      <ClipLoader loading={loadingState} size={15} />\r\n                      </button>\r\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset'>Réinitialiser</button>\r\n                    </CCardFooter>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n       </Form>\r\n        </div>    \r\n      )\r\n      }\r\n    </Formik>   \r\n\r\n      {/* SHOW SUCCES */}\r\n    <CCol sm=\"12\" lg=\"6\">\r\n      <CToaster\r\n        position={'top-right'}\r\n      > \r\n            <CToast\r\n              show={show}\r\n              autohide={true && 4000}\r\n              fade={true}\r\n            >\r\n              <CToastHeader closeButton={true}>\r\n              <CBadge className=\"mr-1\" color=\"success\">SUCCÈS</CBadge>              \r\n              </CToastHeader>\r\n              <CToastBody  color=\"success\">\r\n                Opération réussie !\r\n              </CToastBody>\r\n            </CToast>\r\n      </CToaster>\r\n  </CCol>\r\n\r\n   {/* SHOW ERROR */}\r\n   <CCol sm=\"12\" lg=\"6\">\r\n      <CToaster\r\n        position={'top-right'}\r\n      > \r\n            <CToast\r\n              show={showError}\r\n              autohide={true && 4000}\r\n              fade={true}\r\n            >\r\n              <CToastHeader closeButton={true}>\r\n              <CBadge className=\"mr-1\" color=\"danger\">ECHEC</CBadge>              \r\n              </CToastHeader>\r\n              <CToastBody  color=\"success\">\r\n                Echec de l'opération. Veuillez essayer plus tard !\r\n              </CToastBody>\r\n            </CToast>\r\n      </CToaster>\r\n    </CCol>\r\n  </div>\r\n  )\r\n}\r\nexport default UserForm\r\n"],"sourceRoot":""}