{"version":3,"sources":["views/essais/single-page.js","views/essais/all-pages.js","views/essais/PDF.js"],"names":["SinglePage","props","useState","numPages","setNumPages","pageNumber","setPageNumber","changePage","offset","prevPageNumber","pdf","file","options","workerSrc","loading","size","onLoadSuccess","type","disabled","onClick","pdfjs","GlobalWorkerOptions","version","LoadFromBase64Example","match","data","setData","useEffect","setLoadingState","fetch","process","params","id","then","response","json","method","headers","body","JSON","stringify","nomFichier","nom","hashNomFichier","hashBase64","hashPdf","res","catch","error","console","log","loadingState","className","base64File"],"mappings":"wXAIe,SAASA,EAAWC,GAAQ,IAAD,EACRC,mBAAS,MADD,mBACjCC,EADiC,KACvBC,EADuB,OAEJF,mBAAS,GAFL,mBAEjCG,EAFiC,KAErBC,EAFqB,KASxC,SAASC,EAAWC,GAClBF,GAAc,SAAAG,GAAc,OAAIA,EAAiBD,KAVX,IAqBhCE,EAAQT,EAARS,IAER,OACE,qCACE,cAAC,IAAD,CACEC,KAAMD,EACNE,QAAS,CAAEC,UAAW,kBACtBC,QAAU,cAAC,IAAD,CAAYA,SAAS,EAAMC,KAAM,KAC3CC,cAzBN,YAA8C,IAAbb,EAAY,EAAZA,SAC/BC,EAAYD,GACZG,EAAc,IAmBZ,SAME,cAAC,IAAD,CAAMD,WAAYA,MAEpB,gCACE,sCACQA,IAAeF,EAAW,EAAI,MADtC,OACiDA,GAAY,QAE7D,wBAAQc,KAAK,SAASC,SAAUb,GAAc,EAAGc,QAxBvD,WACEZ,GAAY,IAuBR,6BAGA,wBACEU,KAAK,SACLC,SAAUb,GAAcF,EACxBgB,QA1BR,WACEZ,EAAW,IAsBP,2BCzCRa,IAAMC,oBAAoBR,UAA1B,kDAAiFO,IAAME,QAAvF,kB,OCyDeC,UArDe,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EAGftB,mBAAS,IAHM,mBAGhCuB,EAHgC,KAG1BC,EAH0B,KAIvCC,qBAAU,WACNC,GAAgB,GAEhBC,MAAM,GAAD,OAAIC,8DAAJ,6BAAsDN,EAAMO,OAAOC,KACvEC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAR,GAeP,OAdKI,MAAM,GAAD,OAAIC,gEAAJ,qBAA8D,CAC/DM,OAAQ,OACRC,QAAS,CAAE,eAAgB,mBAC3B,OAAU,oBACVC,KAAMC,KAAKC,UAAU,CACjBC,WAAYhB,EAAKiB,IACjBC,eAAgBlB,EAAKkB,eACrBC,WAAWnB,EAAKoB,YAEnBZ,MAAK,SAAAa,GAAG,OAAIA,EAAIX,UAChBF,MAAK,SAAAa,GAAG,OAAIpB,EAAQoB,MACpBC,OAAM,SAACC,GACJC,QAAQD,MAAM,SAAUA,MAE9BvB,KAERQ,MAAK,kBAAML,GAAgB,MAC3BmB,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZpB,GAAgB,QAKhB,IAlCoC,MAoCC1B,oBAAS,GApCV,mBAoChCiD,EApCgC,KAoClBvB,EApCkB,KAuCvC,OAMI,cALA,CAKA,OAAKwB,UAAU,MAAf,UACA,cAAC,IAAD,CAAYtC,QAASqC,EAAcpC,KAAM,KACzC,cAACf,EAAD,CAAqBU,IAAG,sCAAiCe,EAAK4B","file":"static/js/6.d826c95a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Document, Page } from \"react-pdf\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nexport default function SinglePage(props) {\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1); //setting 1 to show fisrt page\n\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages);\n    setPageNumber(1);\n  }\n\n  function changePage(offset) {\n    setPageNumber(prevPageNumber => prevPageNumber + offset);\n  }\n\n  function previousPage() {\n    changePage(-1);\n  }\n\n  function nextPage() {\n    changePage(1);\n  }\n\n  const { pdf } = props;\n\n  return (\n    <>\n      <Document\n        file={pdf}\n        options={{ workerSrc: \"/pdf.worker.js\" }}\n        loading= {<ClipLoader loading={true} size={35} />}\n        onLoadSuccess={onDocumentLoadSuccess}\n      >\n        <Page pageNumber={pageNumber} />\n      </Document>\n      <div>\n        <p>\n          Page {pageNumber || (numPages ? 1 : \"--\")} of {numPages || \"--\"}\n        </p>\n        <button type=\"button\" disabled={pageNumber <= 1} onClick={previousPage}>\n        Précédent\n        </button>\n        <button\n          type=\"button\"\n          disabled={pageNumber >= numPages}\n          onClick={nextPage}\n        >\n          Suivant\n        </button>\n      </div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Document, Page } from \"react-pdf\";\nimport { pdfjs } from 'react-pdf';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nexport default function AllPages(props) {\n  const [numPages, setNumPages] = useState(null);\n\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages);\n  }\n  \n  const { pdf } = props;\n\n  return (\n    <Document\n      file={pdf}\n      options={{ workerSrc: \"/pdf.worker.js\" }}\n      onLoadSuccess={onDocumentLoadSuccess}\n      nLoadError={console.error}\n    >\n      {Array.from(new Array(numPages), (el, index) => (\n        <Page key={`page_${index + 1}`} pageNumber={index + 1} />\n      ))}\n    </Document>\n  );\n}\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport SinglePagePDFViewer from \"./single-page\";\nimport AllPagesPDFViewer from \"./all-pages\";\nimport \"./styles.css\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst LoadFromBase64Example = ({match}) => {\n\n\n    const [data, setData] = useState({})\n    useEffect(() => {\n        setLoadingState(true);\n\n        fetch(`${process.env.REACT_APP_API_URL}/api/file/info?id=${match.params.id}`)\n        .then(response => response.json())\n        .then(data =>   {\n            fetch(`${process.env.REACT_APP_FILE_SERVER_URL}/api/file/getfile`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json',\n                'Accept': 'application/json'},\n                body: JSON.stringify({\n                    nomFichier: data.nom,\n                    hashNomFichier: data.hashNomFichier,\n                    hashBase64:data.hashPdf\n                })})\n                .then(res => res.json())\n                .then(res => setData(res))\n                .catch((error) => {\n                    console.error('Error:', error);\n                  });\n       return data;\n     })\n     .then(() => setLoadingState(false))\n     .catch((error) => {\n       console.log(error);\n       setLoadingState(false);\n     }); \n      \n        \n      \n    }, []);\n\n    const [loadingState, setLoadingState] = useState(false);\n\n \n    return (\n        // <div  >{console.log(globalData)}\n        //     <embed src={`data:application/pdf;base64,${data.base64File}`}  \n        //     type=\"application/pdf\" width=\"100%\" height=\"100%\"></embed>\n       \n        // </div>\n        <div className=\"App\">\n        <ClipLoader loading={loadingState} size={50} />\n        <SinglePagePDFViewer pdf={`data:application/pdf;base64,${data.base64File}`}  />\n      </div>\n  \n    );\n};\n\nexport default LoadFromBase64Example;"],"sourceRoot":""}