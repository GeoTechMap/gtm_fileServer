{"version":3,"sources":["views/commun/TextField.js","views/essais/EssaiForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","value","map","option","key","id","nom","component","style","position","color","fontSize","BasicForms","match","useState","show","setShow","showError","setShowError","useContext","EssaiContext","globalData","useEffect","fetch","process","then","response","json","setAllTestTypes","UserService","getUsername","res","setAllInstitutions","institution","setAllDepartements","params","setDataForEdit","typeEssai","latitude","longitude","altitude","departement","commune","sectionCommunale","commentaire","code","dateRealisation","motsCles","pdf","idPosition","idFichier","fichier","nomFichier","setAncienNomDuFichier","hashNomFichier","setMyFile","myFile","file","format","size","capacite","data","method","headers","body","JSON","stringify","hashBase64","hashPdf","setDataForAPI","dataForAPI","base64File","setIsPDFPresent","catch","console","dataForAPIref","useRef","current","initVal","anncienNomDuFichier","dataForEdit","allTestTypes","allInstitutions","allDepartements","React","isActive","status","message","alert","validate","Yup","max","min","required","handleChange","event","currentTarget","files","target","callback","reader","FileReader","readAsDataURL","onload","result","onerror","log","getBase64","substr","indexOf","isPDFPresent","loadingState","setLoadingState","initialValues","enableReinitialize","validationSchema","onSubmit","values","Promise","resolve","reject","concat","filter","item","toLowerCase","split","i","allItems","join","nomFichierASuprimmer","state","requestOptions","getToken","essaiSaved","essaiDto","base64","setTimeout","formik","closeButton","xs","sm","autoComplete","row","md","accept","onChange","variant","disabled","loading","lg","autohide","fade"],"mappings":"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","file":"static/js/14.b3b812f8.chunk.js","sourcesContent":["import React from 'react';\nimport { CSelect} from '@coreui/react';\nimport { ErrorMessage, useField } from 'formik';\n\nexport const TextField = ({label, type, options, ...props}) => {\n    const [ field, meta] = useField(props);\n    return (\n        <div className=\"mb-2\" >\n            <label htmlFor={field.name}>{label}</label>\n            {type === \"textarea\" ?\n            <textarea \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            placeholder=\"Veuillez entrer la description...\"\n            rows=\"6\"\n            {...field} {...props}\n            ></textarea>:\n            type === \"select\" ?\n            <CSelect name={label}\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}>\n                <option  value={0}>Choisir</option>\n                 { options.map((option, key) => {              \n                    return <option key={key} value={option.id}>{option.nom}</option>\n                    })}      \n            </CSelect>:\n            type === \"selectString\" ?\n            <CSelect name={label}\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}>\n                <option  value={0}>Choisir</option>\n                 { options.map((option, key) => {              \n                    return <option key={key} value={option}>{option}</option>\n                    })}      \n            </CSelect>:\n        //     type == \"file\" ?\n        //     <CCol xs=\"12\" md=\"12\">\n        //      <CInputFile custom id=\"custom-file-input\" />\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\n        //     Choisir fichier...\n        //     </CLabel>\n        //     </CCol>\n        //    :\n            <input \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}\n            />\n            }\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\n            \n        </div>\n    )\n}","import React ,{useState, useEffect, useRef, useContext} from 'react'\nimport {Formik, Form} from 'formik';\nimport { TextField } from '../commun/TextField';\nimport * as Yup from 'yup';\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CFormText,\n  CRow,\n  CAlert,\n  CLabel,\n  CBadge,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n} from '@coreui/react';\nimport UserService from \"../../../src/services/UserService\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { EssaiContext } from \"../../EssaisContext\";\n\n\nconst BasicForms = ({match}) => {\n//__toaster\nconst [show, setShow] = useState(false);\nconst [showError, setShowError] = useState(false);\n//__end toaster\nconst [globalData, setGlobalData] = useContext(EssaiContext);\n\n  useEffect(() => {\n\n    //__START fetch all test types for the select field\n      fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`)\n        .then((response) => response.json())\n        .then((json) => {\n          setAllTestTypes(json)\n         return json;})\n\n      fetch(`${process.env.REACT_APP_API_URL}/api/utilisateurs/search?username=${UserService.getUsername()}`)\n      .then((response) => response.json())\n      .then((res)=> \n      setAllInstitutions([{\n        id: res.institution.id, \n        nom: res.institution.nom }])\n      )\n\n         setAllDepartements([\n           {id:'Artibonite',nom:'Artibonite'},\n           {id:'Centre',nom:'Centre'},\n           {id:'Grand\\'Anse',nom:'Grand\\'Anse'},\n           {id:'Nippes',nom:'Nippes'},\n           {id:'Nord',nom:'Nord'},\n           {id:'Nord-Est',nom:'Nord-Est'},\n           {id:'Nord-Ouest',nom:'Nord-Ouest'},\n           {id:'Ouest',nom:'Ouest'},\n           {id:'Sud-Est',nom:'Sud-Est'},\n           {id:'Sud',nom:'Sud'},\n         ])\n\n        //  .then((json) => setInitVal({...initVal,\n        //   typeEssai:json[0].id,\n        // }))\n    //__END fetch all test types for the select field\n\n    //__START fetch all test types for the select field\n      // fetch(`http://localhost:8080/api/institutions/`)\n      // .then((response) => response.json())\n      // .then((json) =>{ \n      //   setAllInstitutions(json)\n      //   return json;})\n\n\n\n      // setAllInstitutions([{\n      //   id: UserService.connectedUser ? UserService.connectedUser.institution.id : null, \n      //   nom: UserService.connectedUser ? UserService.connectedUser.institution.nom : null}])\n\n\n      // .then((json) => setInitVal({...initVal,\n      //   institution:json[0].id,\n      // }))\n    //__END fetch all test types for the select field\n\n   if( match.params.id ){\n    fetch(`${process.env.REACT_APP_API_URL}/api/essais/`+match.params.id)\n      .then((response) => response.json())\n      .then((json) => { setDataForEdit({\n        id:json.id,\n        typeEssai:json.typeEssai.id,\n        institution:json.institution.id,\n        latitude:json.position.latitude,\n        longitude:json.position.longitude,\n        altitude:json.position.altitude,\n        departement:json.position.departement,\n        commune:json.position.commune,\n        sectionCommunale:json.position.sectionCommunale,\n        commentaire:json.commentaire,\n        code:json.code,\n        dateRealisation:json.dateRealisation,\n        motsCles:json.motsCles,\n        pdf:'',\n        //---------\n        idPosition:json.position.id,\n        idFichier:json.fichier.id,\n        nomFichier:json.fichier.nom\n      })\n      return json;})\n      .then((json)=>{\n        setAncienNomDuFichier(json.fichier.hashNomFichier)\n        return json;\n      })\n      .then((json)=>{ setMyFile({...myFile,\n        file:{\n          id:json.fichier.id,\n          name:json.fichier.nom,\n          type: json.fichier.format,\n          size:json.fichier.capacite\n        }\n        \n      })\n        return json;\n      })\n      .then(data =>   {\n        fetch(`${process.env.REACT_APP_FILE_SERVER_URL}/api/file/getfile`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Accept': 'application/json'},\n            body: JSON.stringify({\n                nomFichier: data.fichier.nom,\n                hashNomFichier: data.fichier.hashNomFichier,\n                hashBase64:data.fichier.hashPdf\n            })})\n            .then(res => res.json())\n            .then(res => {\n               setDataForAPI({...dataForAPI,\n             \n              pdf:res.base64File})\n              return res;\n            }\n           )\n           .then((json)=>{setMyFile({\n            file:{\n              id:data.fichier.id,\n              name:data.fichier.nom,\n              type: data.fichier.format,\n              size:data.fichier.capacite\n            }\n            \n          })})\n            .then(()=> setIsPDFPresent(true))\n            // .then(()=>console.log('-----------'+dataForAPI.pdf))\n            .catch((error) => {\n                console.error('Error:', error);\n              });\n          return data;\n        })\n      \n   }\n  }, [match.params.id, dataForAPI, myFile,globalData]);\n\n\n  const [myFile, setMyFile] = useState({file:null});//for the file\n  // const onFileChange = event => {\n  //   // Update the state\n  //   setMyFile({file: event.target.files[0]}); \n  //   };\nconst init = {\n  typeEssai: {\n    id:null\n},\ninstitution: {\n    id:null\n},\nposition: {\n    id:null\n},\nfichier: {\n    id:null\n},\nmotsCles: '',\ncode:'',\npdf:''\n}\n\n  const [dataForAPI = init, setDataForAPI] = useState();\n  const dataForAPIref = useRef(dataForAPI);\n  useEffect(\n    () => { dataForAPIref.current = dataForAPI },\n    [dataForAPI]\n  )\n\n\n   const [initVal, setInitVal] = useState({\n    typeEssai:'',\n    institution:'',\n    latitude:'',\n    longitude:'',\n    altitude:'',\n    departement:'',\n    commune:'',\n    sectionCommunale:'',\n    commentaire:'',\n    code:'',\n    dateRealisation:'',\n    motsCles:'',\n    pdf:'',\n  });\n  const [anncienNomDuFichier, setAncienNomDuFichier] = useState('');\n  const [dataForEdit, setDataForEdit] = useState(null);\n  const [allTestTypes, setAllTestTypes] = useState([]);\n  const [allInstitutions, setAllInstitutions] = useState([]);\n  const [allDepartements, setAllDepartements] = useState([]);\n  const [alert, setAlert] = React.useState({ \n    isActive: false, status: '', message: '',})\n\n  const validate = Yup.object({\n    typeEssai: Yup.number()\n      .max(99999999,\"Maximum 45 caractères\")\n      .min(1,\"Faire un choix\")\n      .required(\"Champs obligatoire\"),\n    institution: Yup.number()\n      .max(99999999,\"Maximum 45 caractères\")\n      .min(1,\"Faire un choix\")\n      .required(\"Champs obligatoire\"),\n    latitude: Yup.number(\"Entrer un nombre\")\n      .min(17.5,\"Latitude situé en dehors d'Haïti\")\n      .max(21.0,\"Latitude situé en dehors d'Haïti\")\n      .required(\"Champs obligatoire\"),\n    longitude:  Yup.number(\"Entrer un nombre\")\n      .min(-75.0,\"Latitude situé en dehors d'Haïti\")\n      .max(-71.5,\"Latitude situé en dehors d'Haïti\")\n      .required(\"Champs obligatoire\"),\n    altitude:  Yup.number(\"Entrer un nombre\")\n      .max(99999999,\"Maximum 255 caractères\")\n      .required(\"Champs obligatoire\"),\n    commentaire: Yup.string()\n      .max(255,\"Maximum 255 caractères\"),\n    code: Yup.string()\n      .max(255,\"Maximum 255 caractères\"),\n    dateRealisation: Yup.string()\n      .max(20,\"Maximum 20 caractères\"),\n    motsCles: Yup.string()\n    .max(255,\"Maximum 255 caractères\"),\n    departement: Yup.string()\n    .max(255,\"Maximum 255 caractères\")\n    .required(\"Champs obligatoire\"),\n    // commune: Yup.string()\n    // .max(255,\"Maximum 255 caractères\")\n    // .required(\"Champs obligatoire\"),\n    // sectionCommunale: Yup.string()\n    // .max(255,\"Maximum 255 caractères\")\n    // .required(\"Champs obligatoire\"),\n\n  })\n  \n\nconst getBase64 = (file, callback) => {\n  let reader = new FileReader();\n  reader.readAsDataURL(file);\n  reader.onload = () => {\n    callback(reader.result);\n  };\n  reader.onerror = (error) => {\n    console.log(\"Error: \", error);\n  };\n};\n\nconst handleChange = (event) => {\n  const file = event.currentTarget.files[0];\n  if(file.size < 2000048){\n    if(file.type === 'application/pdf'){\n      setMyFile({file: event.target.files[0]});//for just getting the name outside of the function\n      getBase64(file, (result) => {\n        setDataForAPI({...dataForAPI, pdf:result.substr(result.indexOf(',') + 1)})\n     \n      });\n      setIsPDFPresent(true);\n    }else{\n      console.log('Must choose a PDF file')\n    }\n  }else{\n    console.log('Max file size is 2 MB')\n  }\n};\n\nconst [isPDFPresent, setIsPDFPresent] = useState(false);\nconst [loadingState, setLoadingState] = useState(false);\n\n  return (\n    <div>\n    <Formik\n      initialValues = {\n        dataForEdit || initVal\n      }\n      enableReinitialize\n      validationSchema= {validate}\n      onSubmit={values => {\n        setLoadingState(true);\n        if(!isPDFPresent){//s'il n'y a aucun document\n          // alert('Noooooo')\n          console.log(\"no document\");\n          setLoadingState(false);\n        }else{\n        function first(){\n          return new Promise(function(resolve, reject){\n              // console.log(\"First\");\n              \n              // toBase64(myFile.file, (base64String)=>{\n              // })\n              resolve();\n          });\n      }\n      \n      function second(){\n          return new Promise(function(resolve, reject){\n              // console.log(\"Second\");\n             \n              setDataForAPI({\n                id:match.params.id ? dataForEdit.id : null,\n                typeEssai: {\n                  id:values.typeEssai\n              },\n              institution: {\n                  id:values.institution\n              },\n              position: {\n                  id: match.params.id ? dataForEdit.idPosition : null,\n                  latitude:values.latitude,\n                  longitude:values.longitude,\n                  altitude:values.altitude,\n                  departement:values.departement,\n                  // commune:values.commune,\n                  // sectionCommunale:values.sectionCommunale\n              },\n              fichier: {\n                  id:match.params.id ? dataForEdit.idFichier : null,\n                  nom:myFile.file.name,\n                  format: myFile.file.type,\n                  capacite:myFile.file.size\n              },\n              commentaire:values.commentaire,\n              code:values.code,\n              dateRealisation:values.dateRealisation,\n              motsCles: (\n                    (values.motsCles.concat(' '+ values.departement)\n                  //concater les mots cles avec le type d'essai\n                  .concat(' '+ \n                    //get nom of selected type essai\n                    ((allTestTypes.filter( item => item.id == values.typeEssai))[0]).nom\n                    )\n                  //concater les mots cles avec le type d'essai\n                  .concat(' '+ \n                  //get nom of selected type essai\n                  ((allInstitutions.filter( item => item.id == values.institution))[0]).nom\n                  )\n                    ).toLowerCase()\n              // on enlève les duplications\n              .split(' ').filter(function(item,i,allItems){\n                    return i==allItems.indexOf(item);\n                }).join(' ')\n              ),\n              pdf:dataForAPI.pdf,\n              nomFichierASuprimmer:anncienNomDuFichier\n            })\n            setDataForAPI((state) => {\n              // console.log(state); // \"React is awesome!\"\n              \n              return state;\n            });\n            \n              resolve();\n          });\n      }\n      \n      function third(){\n        // console.log(dataForAPI)\n          return new Promise(function(resolve, reject){\n              // console.log(\"Third\");\n              const requestOptions = {\n                method: match.params.id ?'PUT':'POST',\n                headers: { 'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${UserService.getToken()}`},\n                body: JSON.stringify(dataForAPIref.current)\n            };\n            console.log(dataForAPIref.current)\n            //check if it is POST or PUT\n            if(match.params.id){//_______________PUT RESQUEST________________\n              fetch(`${process.env.REACT_APP_API_URL}/api/essais/`+match.params.id, requestOptions)\n                .then(response => response.json())\n                .then( essaiSaved => {\n                  fetch(`${process.env.REACT_APP_FILE_SERVER_URL}/api/file`, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json',\n                    'Accept': 'application/json'},\n                    body: JSON.stringify({\n                      hashNomFichier: essaiSaved.essaiDto.fichier.hashNomFichier,\n                      nomFichierASuprimmer:anncienNomDuFichier,\n                      base64: dataForAPI.pdf\n                    })})\n                    // .then(res => console.log(res))\n                    \n                  }\n                  )\n                  .then(() => setShow(true))\n                  .then(() => setLoadingState(false))\n                //.then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}))\n                .catch((error) => {\n                  console.log(error);\n                  setShowError(true);\n                  setLoadingState(false);\n                })\n            }else{//_______________POST RESQUEST________________\n              // console.log(requestOptions.body)\n                fetch(`${process.env.REACT_APP_API_URL}/api/essais`, requestOptions)\n                .then(response => response.json())//to the app server\n                .then( essaiSaved => {\n                  fetch(`${process.env.REACT_APP_FILE_SERVER_URL}/api/file`, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json',\n                    'Accept': 'application/json'},\n                    body: JSON.stringify({\n                      hashNomFichier: essaiSaved.essaiDto.fichier.hashNomFichier,\n                      nomFichierASuprimmer:\"\",//We dont delete any old doc\n                      base64: dataForAPI.pdf\n                    })})\n                    // .then(res => console.log(res))\n                  }\n                  )\n                  \n                  .then(() => setShow(true))\n                  .then(() => setLoadingState(false))\n               // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}))\n               .catch((error) => {\n                console.log(error);\n                setShowError(true);\n                setLoadingState(false);\n              })\n                // fetch(`${process.env.REACT_APP_API_URL}/api/essais`,\n                //   {\n                //     method: 'POST',\n                //     body: values,\n                //   }\n                // )\n                // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}))\n                // .catch((error) => {\n                //   console.error('Error:', error);\n                // });\n              }\n              resolve();\n          });\n      }\n\n      first()\n      .then(second)\n      .then(third);\n\n\n\n      setTimeout(() => {\n        setShow(false);\n        setShowError(false);\n      }, 3000)\n            // setTimeout(() => {\n            //   setAlert({...alert, isActive: false, message:''})\n            // }, 4000)\n      }\n      }\n    }\n    >\n      { formik => (\n        <div>\n       <Form>\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\n          <CRow>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur l'essai   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>\n                      <CFormGroup>\n                          <TextField  label=\"Type d'essai*:\" name=\"typeEssai\" \n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer le type d'essai...\"/>\n                          <CFormText className=\"help-block\">Veuillez entrer le type d'essai</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Institution*:\" name=\"institution\" \n                         type=\"select\" options={allInstitutions} placeholder=\"Entrer l'institution\" />\n                        <CFormText className=\"help-block\">Veuillez entrer l'institution</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Latitude*:\" name=\"latitude\" \n                        type=\"text\" placeholder=\"Entrer la latitude\" autoComplete=\"latitude\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer la latitude (ex: 18.54)</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Longitude*:\" name=\"longitude\" \n                        type=\"text\" placeholder=\"Entrer la longitude\" autoComplete=\"longitude\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer la longitude (ex: -72.68)</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Altitude*:\" name=\"altitude\" \n                        type=\"text\" placeholder=\"Entrer l'altitude\" autoComplete=\"altitude\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer l'altitude (ex: 45)</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                          <TextField  label=\"Département*:\" name=\"departement\" \n                          type=\"select\" options={allDepartements} placeholder=\"Entrer le département de l'essai...\"/>\n                          <CFormText className=\"help-block\">Veuillez entrer le département de l'essai</CFormText>\n                      </CFormGroup>\n                    </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur l'essai   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>  \n                    {/* <CFormGroup>\n                          <TextField  label=\"Commune*:\" name=\"commune\" \n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer la commune de l'essai...\"/>\n                          <CFormText className=\"help-block\">Veuillez entrer la commune de l'essai</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                          <TextField  label=\"Section communale*:\" name=\"sectionCommunale\" \n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer la section communale de l'essai...\"/>\n                          <CFormText className=\"help-block\">Veuillez entrer la section communale de l'essai</CFormText>\n                      </CFormGroup> */}\n                      <CFormGroup>\n                        <TextField label=\"Date de réalisation: (jj/mm/aaaa)\" name=\"dateRealisation\" \n                        type=\"text\" placeholder=\"Entrer la date de réalisation de l'essai\" autoComplete=\"dateRealisation\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer la date de réalisation de l'essai (format: Jour/Mois/Année)</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Code de l'essai:\" name=\"code\" \n                        type=\"text\" placeholder=\"Entrer le code de l'essai\" autoComplete=\"code\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer le code de l'essai</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Mots clés:\" name=\"motsCles\" \n                        type=\"textarea\" placeholder=\"Entrer les mots clés\" autoComplete=\"motsCles\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer les mots clés</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Commentaires:\" name=\"commentaire\" \n                        type=\"textarea\" placeholder=\"Entrer les commentaires\" autoComplete=\"commentaire\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer un commentaire</CFormText>\n                      </CFormGroup>\n                      {/* <CFormGroup >\n                        <TextField label=\"Fichier:\" name=\"fichier\" \n                        type=\"file\" placeholder=\"Entrer le fichier\" autoComplete=\"fichier\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer le fichier (Max: 2 MB)</CFormText>\n                      </CFormGroup>  */}\n                      <CFormGroup row>{}\n                      <CCol xs=\"12\" md=\"12\">\n                        <input  id=\"custom-file-input\" \n                        // onChange={onFileChange}\n                        type=\"file\" \n                        accept=\"application/pdf\"     \n                        onChange={(event) => handleChange(event)}\n                          />\n                        <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\n                           {myFile.file ? myFile.file.name:'Choisir un fichier...'}\n                        </CLabel>\n                      </CCol>\n                    </CFormGroup> \n                    {!dataForEdit && !isPDFPresent ? \n                      <CFormGroup row>\n                      <CCol xs=\"12\" md=\"12\"> \n                      <CFormText className=\"help-block\"><span style={{color:'red'}}>Choisir un PDF*</span></CFormText>\n                      </CCol>\n                    </CFormGroup>  \n                    : ''}   \n                     \n                    </CCardBody>\n                    \n                    {dataForEdit ? \n                    <CFormGroup row>\n                      <CCol xs=\"12\" md=\"12\"> \n                      <CFormText className=\"help-block\"> Ancien PDF:  {dataForEdit ? dataForEdit.nomFichier :''}</CFormText>\n                      </CCol>\n                    </CFormGroup>   :''}\n                     \n                    <CCardFooter>\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\"\n                       disabled={loadingState}\n                       >{match.params.id ? 'Modifier': 'Enregistrer'}\n                      <ClipLoader loading={loadingState} size={15} />\n                      </button>\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset'>Réinitialiser</button>\n                    </CCardFooter>\n              </CCard>\n            </CCol>\n          </CRow>\n       </Form>\n        </div>    \n      )\n      }\n    </Formik> \n\n      {/* SHOW SUCCES */} \n      <CCol sm=\"12\" lg=\"6\">\n        <CToaster\n          position={'top-right'}\n        > \n              <CToast\n                show={show}\n                autohide={true && 4000}\n                fade={true}\n              >\n                <CToastHeader closeButton={true}>\n                <CBadge className=\"mr-1\" color=\"success\">SUCCÈS</CBadge>              \n                </CToastHeader>\n                <CToastBody  color=\"success\">\n                  Opération réussie !\n                </CToastBody>\n              </CToast>\n        </CToaster>\n      </CCol>\n\n      {/* SHOW ERROR */}\n      <CCol sm=\"12\" lg=\"6\">\n      <CToaster\n        position={'top-right'}\n      > \n            <CToast\n              show={showError}\n              autohide={true && 4000}\n              fade={true}\n            >\n              <CToastHeader closeButton={true}>\n              <CBadge className=\"mr-1\" color=\"danger\">ECHEC</CBadge>              \n              </CToastHeader>\n              <CToastBody  color=\"success\">\n                Echec de l'opération. Veuillez essayer plus tard !\n              </CToastBody>\n            </CToast>\n      </CToaster>\n    </CCol>\n </div> \n  )\n}\nexport default BasicForms\n"],"sourceRoot":""}