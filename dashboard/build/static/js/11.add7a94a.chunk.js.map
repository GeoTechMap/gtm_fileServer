{"version":3,"sources":["views/commun/TextField.js","views/faqs/FaqForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","value","map","option","key","id","nom","component","style","position","color","fontSize","FaqForms","match","useState","show","setShow","showError","setShowError","useEffect","params","fetch","process","then","response","json","setDataForEdit","faqDto","dataForEdit","React","isActive","status","message","alert","validate","Yup","question","max","required","loadingState","setLoadingState","initialValues","enableReinitialize","validationSchema","onSubmit","values","requestOptions","method","headers","UserService","getToken","body","JSON","stringify","catch","console","log","setTimeout","formik","closeButton","xs","sm","autoComplete","defaultValue","disabled","loading","size","lg","autohide","fade"],"mappings":"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","file":"static/js/11.add7a94a.chunk.js","sourcesContent":["import React from 'react';\nimport { CSelect} from '@coreui/react';\nimport { ErrorMessage, useField } from 'formik';\n\nexport const TextField = ({label, type, options, ...props}) => {\n    const [ field, meta] = useField(props);\n    return (\n        <div className=\"mb-2\" >\n            <label htmlFor={field.name}>{label}</label>\n            {type === \"textarea\" ?\n            <textarea \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            placeholder=\"Veuillez entrer la description...\"\n            rows=\"6\"\n            {...field} {...props}\n            ></textarea>:\n            type === \"select\" ?\n            <CSelect name={label}\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}>\n                <option  value={0}>Choisir</option>\n                 { options.map((option, key) => {              \n                    return <option key={key} value={option.id}>{option.nom}</option>\n                    })}      \n            </CSelect>:\n            type === \"selectString\" ?\n            <CSelect name={label}\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}>\n                <option  value={0}>Choisir</option>\n                 { options.map((option, key) => {              \n                    return <option key={key} value={option}>{option}</option>\n                    })}      \n            </CSelect>:\n        //     type == \"file\" ?\n        //     <CCol xs=\"12\" md=\"12\">\n        //      <CInputFile custom id=\"custom-file-input\" />\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\n        //     Choisir fichier...\n        //     </CLabel>\n        //     </CCol>\n        //    :\n            <input \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}\n            />\n            }\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\n            \n        </div>\n    )\n}","import React ,{useState, useEffect} from 'react'\nimport {Formik, Form} from 'formik';\nimport { TextField } from '../commun/TextField';\nimport * as Yup from 'yup';\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CFormText,\n  CRow,\n  CAlert,\n  CBadge,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n} from '@coreui/react'\nimport UserService from \"../../services/UserService\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst FaqForms = ({match}) => {\n  //__toaster\n    const [show, setShow] = useState(false);\n    const [showError, setShowError] = useState(false);\n  //__end toaster\n\n  useEffect(() => {\n   if( match.params.id ){\n    fetch(`${process.env.REACT_APP_API_URL}/api/faqs/`+match.params.id)\n      .then((response) => response.json())\n      .then((json) => setDataForEdit(json.faqDto))\n      \n   }\n  }, [match.params.id]);\n\n  const initVal ={\n    question: '',\n    response:'',\n  }\n  const [dataForEdit, setDataForEdit] = useState(null);\n  const [alert, setAlert] = React.useState({ \n    isActive: false, status: '', message: '',})\n\n  const validate = Yup.object({\n    question: Yup.string()\n    .max(250,\"Maximum 250 caractères\")\n    .required(\"Champs obligatire\"),\n    response: Yup.string()        \n  })\n  const [loadingState, setLoadingState] = useState(false);\n\n  return (\n    <div>\n    <Formik\n      initialValues = {\n        dataForEdit || initVal\n      }\n      enableReinitialize\n      validationSchema= {validate}\n      onSubmit={values => {\n      //  console.log(values)\n      setLoadingState(true);\n          const requestOptions = {\n            method: match.params.id ?'PUT':'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': `Bearer ${UserService.getToken()}` },\n            body: JSON.stringify(values)\n        };\n\n        \n        //check if it is POST or PUT\n        if(match.params.id){\n          fetch(`${process.env.REACT_APP_API_URL}/api/faqs/`+match.params.id, requestOptions)\n            .then(response => response.json())//to do:TEST IF SUCCES first\n            .then(() => setShow(true))\n            .then(() => setLoadingState(false))\n            .catch((error) => {\n              console.log(error);\n              setShowError(true);\n              setLoadingState(false);\n            })\n            // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n        }else{\n            fetch(`${process.env.REACT_APP_API_URL}/api/faqs/`, requestOptions)\n            .then(response => response.json())\n            // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n            .then(() => setShow(true))\n            .then(() => setLoadingState(false))\n            .catch((error) => {\n              console.log(error);\n              setShowError(true)\n              setLoadingState(false);\n            })\n          }\n\n            setTimeout(() => {\n              setShow(false);\n              setShowError(false);\n            }, 3000)\n      }}\n    >\n      { formik => (\n        <div>\n       <Form>\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\n       <CRow>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  FAQS\n                 </CCardHeader>\n                    <CCardBody>\n                      <CFormGroup>\n                          <TextField label=\"Question*:\" name=\"question\" \n                          type=\"text\" placeholder=\"Entrer la question...\" \n                          autoComplete=\"question\" \n                          defaultValue=\"Normal\"\n                          />\n                          <CFormText className=\"help-block\">Veuillez entrer la question</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                          <TextField label=\"Reponse:\" name=\"response\" \n                          type=\"text\" placeholder=\"Entrer la reponse...\" \n                          autoComplete=\"response\" \n                          defaultValue=\"Normal\"\n\n                          />\n                          <CFormText className=\"help-block\">Veuillez entrer la reponse</CFormText>\n                      </CFormGroup>\n                    </CCardBody>\n\n                    <CCardFooter>\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\"\n                      disabled={loadingState}\n                      >{match.params.id ? 'Modifier': 'Enregistrer'}\n                      <ClipLoader loading={loadingState} size={15} />\n                      </button>\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset'>Réinitialiser</button>\n                    </CCardFooter>\n\n              </CCard>\n            </CCol>\n    \n          </CRow>\n       </Form>\n        </div>    \n      )\n      }\n    </Formik>   \n    {/* SHOW SUCCES */}\n    <CCol sm=\"12\" lg=\"6\">\n      <CToaster\n        position={'top-right'}\n      > \n            <CToast\n              show={show}\n              autohide={true && 4000}\n              fade={true}\n            >\n              <CToastHeader closeButton={true}>\n              <CBadge className=\"mr-1\" color=\"success\">SUCCÈS</CBadge>              \n              </CToastHeader>\n              <CToastBody  color=\"success\">\n                Opération réussie !\n              </CToastBody>\n            </CToast>\n      </CToaster>\n    </CCol>\n\n      {/* SHOW ERROR */}\n      <CCol sm=\"12\" lg=\"6\">\n      <CToaster\n        position={'top-right'}\n      > \n            <CToast\n              show={showError}\n              autohide={true && 4000}\n              fade={true}\n            >\n              <CToastHeader closeButton={true}>\n              <CBadge className=\"mr-1\" color=\"danger\">ECHEC</CBadge>              \n              </CToastHeader>\n              <CToastBody  color=\"danger\">\n                Echec de l'opération. Veuillez essayer plus tard !\n              </CToastBody>\n            </CToast>\n      </CToaster>\n    </CCol>\n  </div>\n  )\n}\nexport default FaqForms\n"],"sourceRoot":""}