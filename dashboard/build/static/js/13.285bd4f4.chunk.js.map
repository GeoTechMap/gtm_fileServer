{"version":3,"sources":["views/commun/TextField.js","views/test_types/TestTypeForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","value","map","option","key","id","nom","component","style","position","color","fontSize","BasicForms","match","useState","show","setShow","showError","setShowError","useEffect","params","fetch","process","then","response","json","setDataForEdit","typeEssaiDto","dataForEdit","React","isActive","status","message","alert","validate","Yup","max","required","sigle","codeCouleur","description","errorMessage","setErrorMessage","loadingState","setLoadingState","initialValues","enableReinitialize","validationSchema","onSubmit","values","requestOptions","method","headers","UserService","getToken","body","JSON","stringify","res","console","log","catch","setTimeout","formik","closeButton","xs","sm","autoComplete","href","target","disabled","loading","size","lg","autohide","fade"],"mappings":"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","file":"static/js/13.285bd4f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CSelect} from '@coreui/react';\r\nimport { ErrorMessage, useField } from 'formik';\r\n\r\nexport const TextField = ({label, type, options, ...props}) => {\r\n    const [ field, meta] = useField(props);\r\n    return (\r\n        <div className=\"mb-2\" >\r\n            <label htmlFor={field.name}>{label}</label>\r\n            {type === \"textarea\" ?\r\n            <textarea \r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            placeholder=\"Veuillez entrer la description...\"\r\n            rows=\"6\"\r\n            {...field} {...props}\r\n            ></textarea>:\r\n            type === \"select\" ?\r\n            <CSelect name={label}\r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}>\r\n                <option  value={0}>Choisir</option>\r\n                 { options.map((option, key) => {              \r\n                    return <option key={key} value={option.id}>{option.nom}</option>\r\n                    })}      \r\n            </CSelect>:\r\n            type === \"selectString\" ?\r\n            <CSelect name={label}\r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}>\r\n                <option  value={0}>Choisir</option>\r\n                 { options.map((option, key) => {              \r\n                    return <option key={key} value={option}>{option}</option>\r\n                    })}      \r\n            </CSelect>:\r\n        //     type == \"file\" ?\r\n        //     <CCol xs=\"12\" md=\"12\">\r\n        //      <CInputFile custom id=\"custom-file-input\" />\r\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\r\n        //     Choisir fichier...\r\n        //     </CLabel>\r\n        //     </CCol>\r\n        //    :\r\n            <input \r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}\r\n            />\r\n            }\r\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\r\n            \r\n        </div>\r\n    )\r\n}","import React ,{useState, useEffect} from 'react'\r\nimport {Formik, Form} from 'formik';\r\nimport { TextField } from '../commun/TextField';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormGroup,\r\n  CFormText,\r\n  CRow,\r\n  CAlert,\r\n  CBadge,\r\n  CToast,\r\n  CToastBody,\r\n  CToastHeader,\r\n  CToaster,\r\n} from '@coreui/react';\r\nimport UserService from \"../../../src/services/UserService\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport axios from 'axios';\r\n\r\nconst BasicForms = ({match}) => {\r\n  //__toaster\r\n  const [show, setShow] = useState(false);\r\n  const [showError, setShowError] = useState(false);\r\n  //__end toaster\r\n\r\n  useEffect(() => {\r\n   if( match.params.id ){\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`+match.params.id)\r\n      .then((response) => response.json())\r\n      .then((json) => setDataForEdit(json.typeEssaiDto))\r\n      \r\n   }\r\n  }, [match.params.id]);\r\n\r\n  const initVal ={\r\n    nom: '',\r\n    sigle:'',\r\n    codeCouleur:'0077FF',\r\n    description:'',\r\n  }\r\n  const [dataForEdit, setDataForEdit] = useState(null);\r\n  const [alert, setAlert] = React.useState({ \r\n    isActive: false, status: '', message: '',})\r\n\r\n  const validate = Yup.object({\r\n    nom: Yup.string()\r\n      .max(45,\"Maximum 45 caractères\")\r\n      .required(\"Champs obligatoire\"),\r\n    sigle: Yup.string()\r\n    .max(45,\"Maximum 45 caractères\"),\r\n    codeCouleur: Yup.string()\r\n    .max(6,\"Maximum 6 caractères\"),\r\n    description: Yup.string()\r\n      .max(255,\"Maximum 255 caractères\"),\r\n        \r\n  })\r\n\r\n  const [errorMessage, setErrorMessage] = useState('Echec du processus. Veuillez essayer ultérieurement !');\r\n  const [loadingState, setLoadingState] = useState(false);\r\n  \r\n  return (\r\n    <div>\r\n    <Formik\r\n      initialValues = {\r\n        dataForEdit || initVal\r\n      }\r\n      enableReinitialize\r\n      validationSchema= {validate}\r\n      onSubmit={values => {\r\n        setLoadingState(true);\r\n      //  console.log(values);\r\n\r\n  \r\n\r\n \r\n        const requestOptions = {\r\n          method: match.params.id ?'PUT':'POST',\r\n          headers: { 'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${UserService.getToken()}`,\r\n          \"Access-Control-Allow-Origin\" : \"*\", \r\n          \"Access-Control-Allow-Credentials\" : true  },\r\n          body: JSON.stringify(values)\r\n      };\r\n\r\n       //check if it is POST or PUT\r\n       if(match.params.id){\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`+match.params.id, requestOptions)\r\n          .then(response => response.json())\r\n          .then((res) => {\r\n            if(res.message !=='success'){\r\n             console.log(res.message)\r\n             setErrorMessage(res.message);\r\n             setShowError(true)\r\n             setLoadingState(false);\r\n            }          \r\n             return res;\r\n           })\r\n          .then(() => setShow(true))\r\n          .then(() => setLoadingState(false))\r\n          .catch((error) => {\r\n            console.log(error);\r\n            setShowError(true)\r\n            setLoadingState(false);\r\n          })\r\n          // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\r\n      }else{\r\n          fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`, requestOptions)\r\n          .then(response => response.json())\r\n          .then((res) => {\r\n           if(res.message !=='success'){\r\n            console.log(res.message)\r\n            setErrorMessage(res.message);\r\n            setShowError(true)\r\n            setLoadingState(false);\r\n           }          \r\n            return res;\r\n          })\r\n          .then(() => setShow(true))\r\n          .then(() => setLoadingState(false))\r\n          .catch((error) => {\r\n            console.log(error);\r\n            setShowError(true)\r\n            setLoadingState(false);\r\n          })\r\n          // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\r\n        }\r\n \r\n        \r\n  setTimeout(() => {\r\n    setShow(false)\r\n    setShowError(false);\r\n  }, 3000)\r\n       \r\n            // setTimeout(() => {\r\n            //   setAlert({...alert, isActive: false, message:''})\r\n            // }, 4000)\r\n      }}\r\n    >\r\n      { formik => (\r\n        <div>\r\n       <Form>\r\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\r\n          <CRow>\r\n            <CCol xs=\"12\" sm=\"6\">\r\n              <CCard>\r\n                  <CCardHeader>\r\n                  Informations sur le type de d'essai   {  match.params.id}\r\n                 </CCardHeader>\r\n                    <CCardBody>\r\n                      <CFormGroup>\r\n                          <TextField  label=\"Nom*:\" name=\"nom\" \r\n                          type=\"text\" placeholder=\"Entrer le nom du type d'essai...\"\r\n                           autoComplete=\"nom\"                       \r\n                           />\r\n                          <CFormText className=\"help-block\">Veillez entrer le nom du type d'essai</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Sigle:\" name=\"sigle\" type=\"text\" placeholder=\"Entrer l'abbréviation du type d'essai..\" autoComplete=\"sigle\"/>\r\n                        <CFormText className=\"help-block\">Veillez entrer l'abbréviation du type d'essai</CFormText>\r\n                      </CFormGroup> \r\n                    </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n            <CCol xs=\"12\" sm=\"6\">\r\n              <CCard>\r\n                  <CCardHeader>\r\n                  Informations sur le type d'essai   {  match.params.id}\r\n                 </CCardHeader>\r\n                    <CCardBody>  \r\n                    <CFormGroup>\r\n                        <TextField label=\"Code couleur:\" name=\"codeCouleur\" type=\"text\" placeholder=\"Exemple: 0077FF\" autoComplete=\"codeCouleur\"/>\r\n                        <CFormText className=\"help-block\">Veillez entrer le code de couleur du marqueur en hexadécimal\r\n                         <a href=\"https://www.rapidtables.com/web/color/RGB_Color.html\" target=\"_blank\">(aide)</a></CFormText>\r\n                      </CFormGroup> \r\n                      <CFormGroup>\r\n                        <TextField label=\"Description:\" type=\"textarea\" name=\"description\"  placeholder=\"Entrer la description de téléphone...\" autoComplete=\"description\"/>\r\n                        <CFormText className=\"help-block\">Veillez entrer la description de l'institution</CFormText>\r\n                      </CFormGroup>      \r\n                    </CCardBody>\r\n                    <CCardFooter>\r\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\"\r\n                         disabled={loadingState}\r\n                         >{match.params.id ? 'Modifier': 'Enregistrer'} \r\n                      <ClipLoader loading={loadingState} size={15} />\r\n                     </button>\r\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset'>Réinitialiser</button>\r\n                    </CCardFooter>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n       </Form>\r\n        </div>    \r\n      )\r\n      }\r\n    </Formik>   \r\n    {/* SHOW SUCCES */}\r\n    <CCol sm=\"12\" lg=\"6\">\r\n    <CToaster\r\n      position={'top-right'}\r\n      > \r\n          <CToast\r\n            show={show}\r\n            autohide={true && 4000}\r\n            fade={true}\r\n          >\r\n            <CToastHeader closeButton={true}>\r\n            <CBadge className=\"mr-1\" color=\"success\">SUCCÈS</CBadge>              \r\n            </CToastHeader>\r\n            <CToastBody  color=\"success\">\r\n              Opération réussie !\r\n            </CToastBody>\r\n          </CToast>\r\n      </CToaster>\r\n    </CCol>\r\n\r\n    {/* SHOW ERROR */}\r\n    <CCol sm=\"12\" lg=\"6\">\r\n          <CToaster\r\n            position={'top-right'}\r\n          > \r\n                <CToast\r\n                  show={showError}\r\n                  autohide={true && 4000}\r\n                  fade={true}\r\n                >\r\n                  <CToastHeader closeButton={true}>\r\n                  <CBadge className=\"mr-1\" color=\"danger\">ECHEC</CBadge>              \r\n                  </CToastHeader>\r\n                  <CToastBody  color=\"danger\">\r\n                    {errorMessage}\r\n                  </CToastBody>\r\n                </CToast>\r\n          </CToaster>\r\n        </CCol>\r\n</div>\r\n  )\r\n}\r\nexport default BasicForms\r\n"],"sourceRoot":""}