{"version":3,"sources":["views/commun/TextField.js","views/institutions/InstitutionForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","value","map","option","key","id","nom","component","style","position","color","fontSize","BasicForms","match","useState","show","setShow","showError","setShowError","useEffect","params","fetch","process","then","response","json","setDataForEdit","institutionDto","dataForEdit","React","isActive","status","message","alert","validate","Yup","max","required","sigle","adresse","telephone1","telephone2","email","siteWeb","numeroFiscal","description","loadingState","setLoadingState","initialValues","enableReinitialize","validationSchema","onSubmit","values","requestOptions","method","headers","UserService","getToken","body","JSON","stringify","catch","console","log","setTimeout","formik","closeButton","xs","sm","autoComplete","disabled","loading","size","lg","autohide","fade"],"mappings":"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","file":"static/js/12.abe0d1ed.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CSelect} from '@coreui/react';\r\nimport { ErrorMessage, useField } from 'formik';\r\n\r\nexport const TextField = ({label, type, options, ...props}) => {\r\n    const [ field, meta] = useField(props);\r\n    return (\r\n        <div className=\"mb-2\" >\r\n            <label htmlFor={field.name}>{label}</label>\r\n            {type === \"textarea\" ?\r\n            <textarea \r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            placeholder=\"Veuillez entrer la description...\"\r\n            rows=\"6\"\r\n            {...field} {...props}\r\n            ></textarea>:\r\n            type === \"select\" ?\r\n            <CSelect name={label}\r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}>\r\n                <option  value={0}>Choisir</option>\r\n                 { options.map((option, key) => {              \r\n                    return <option key={key} value={option.id}>{option.nom}</option>\r\n                    })}      \r\n            </CSelect>:\r\n            type === \"selectString\" ?\r\n            <CSelect name={label}\r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}>\r\n                <option  value={0}>Choisir</option>\r\n                 { options.map((option, key) => {              \r\n                    return <option key={key} value={option}>{option}</option>\r\n                    })}      \r\n            </CSelect>:\r\n        //     type == \"file\" ?\r\n        //     <CCol xs=\"12\" md=\"12\">\r\n        //      <CInputFile custom id=\"custom-file-input\" />\r\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\r\n        //     Choisir fichier...\r\n        //     </CLabel>\r\n        //     </CCol>\r\n        //    :\r\n            <input \r\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\r\n            {...field} {...props}\r\n            />\r\n            }\r\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\r\n            \r\n        </div>\r\n    )\r\n}","import React ,{useState, useEffect} from 'react'\r\nimport {Formik, Form} from 'formik';\r\nimport { TextField } from '../commun/TextField';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormGroup,\r\n  CFormText,\r\n  CRow,\r\n  CAlert,\r\n  CBadge,\r\n  CToast,\r\n  CToastBody,\r\n  CToastHeader,\r\n  CToaster,\r\n} from '@coreui/react'\r\nimport UserService from \"../../../src/services/UserService\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nconst BasicForms = ({match}) => {\r\n  //__toaster\r\n    const [show, setShow] = useState(false);\r\n    const [showError, setShowError] = useState(false);\r\n  //__end toaster\r\n\r\n  useEffect(() => {\r\n   if( match.params.id ){\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/institutions/`+match.params.id)\r\n      .then((response) => response.json())\r\n      .then((json) => setDataForEdit(json.institutionDto))\r\n      \r\n   }\r\n  }, [match.params.id]);\r\n\r\n  const initVal ={\r\n    nom: '',\r\n    sigle:'',\r\n    adresse:'',\r\n    telephone1:'',\r\n    telephone2:'',\r\n    email:'',\r\n    siteWeb:'',\r\n    numeroFiscal:'',\r\n    description:'',\r\n  }\r\n  const [dataForEdit, setDataForEdit] = useState(null);\r\n  const [alert, setAlert] = React.useState({ \r\n    isActive: false, status: '', message: '',})\r\n\r\n  const validate = Yup.object({\r\n    nom: Yup.string()\r\n    .max(100,\"Maximum 100 caractères\")\r\n    .required(\"Champs obligatire\"),\r\n    sigle: Yup.string()\r\n    .max(45,\"Maximum 45 caractères\"),\r\n    adresse: Yup.string()\r\n    .max(45,\"Maximum 45 caractères\")\r\n    .required(\"Champs obligatire\"),\r\n    telephone1: Yup.string()\r\n      .max(15,\"Maximum 15 caractères\")\r\n      .required(\"Champs obligatire\"),\r\n    telephone2: Yup.string()\r\n      .max(15,\"Maximum 15 caractères\"),\r\n    email: Yup.string()\r\n      .email(\"Email invalide\")\r\n      .required(\"Champs obligatire\"),\r\n    siteWeb: Yup.string()\r\n      .max(45,\"Maximum 45 caractères\"),\r\n    numeroFiscal: Yup.string()\r\n      .max(45,\"Maximum 45 caractères\")\r\n      .required(\"Champs obligatire\"),\r\n    description: Yup.string()\r\n      .max(255,\"Maximum 255 caractères\"),\r\n        \r\n  })\r\n  const [loadingState, setLoadingState] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n    <Formik\r\n      initialValues = {\r\n        dataForEdit || initVal\r\n      }\r\n      enableReinitialize\r\n      validationSchema= {validate}\r\n      onSubmit={values => {\r\n      //  console.log(values)\r\n      setLoadingState(true);\r\n          const requestOptions = {\r\n            method: match.params.id ?'PUT':'POST',\r\n            headers: { 'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${UserService.getToken()}` },\r\n            body: JSON.stringify(values)\r\n        };\r\n\r\n        \r\n        //check if it is POST or PUT\r\n        if(match.params.id){\r\n          fetch(`${process.env.REACT_APP_API_URL}/api/institutions/`+match.params.id, requestOptions)\r\n            .then(response => response.json())//to do:TEST IF SUCCES first\r\n            .then(() => setShow(true))\r\n            .then(() => setLoadingState(false))\r\n            .catch((error) => {\r\n              console.log(error);\r\n              setShowError(true);\r\n              setLoadingState(false);\r\n            })\r\n            // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\r\n        }else{\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/institutions/`, requestOptions)\r\n            .then(response => response.json())\r\n            // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\r\n            .then(() => setShow(true))\r\n            .then(() => setLoadingState(false))\r\n            .catch((error) => {\r\n              console.log(error);\r\n              setShowError(true)\r\n              setLoadingState(false);\r\n            })\r\n          }\r\n\r\n            setTimeout(() => {\r\n              setShow(false);\r\n              setShowError(false);\r\n            }, 3000)\r\n      }}\r\n    >\r\n      { formik => (\r\n        <div>\r\n       <Form>\r\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\r\n       <CRow>\r\n            <CCol xs=\"12\" sm=\"6\">\r\n              <CCard>\r\n                  <CCardHeader>\r\n                  Informations sur l'institution   {  match.params.id}\r\n                 </CCardHeader>\r\n                    <CCardBody>\r\n                      <CFormGroup>\r\n                          <TextField label=\"Nom*:\" name=\"nom\" \r\n                          type=\"text\" placeholder=\"Entrer le nom de l'institution...\" \r\n                          autoComplete=\"nom\" \r\n                          />\r\n                          <CFormText className=\"help-block\">Veuillez entrer le nom de l'institution</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                          <TextField label=\"Sigle:\" name=\"sigle\" \r\n                          type=\"text\" placeholder=\"Entrer le sigle de l'institution...\" \r\n                          autoComplete=\"sigle\" \r\n                          />\r\n                          <CFormText className=\"help-block\">Veuillez entrer le sigle de l'institution</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Adresse*:\" name=\"adresse\" type=\"text\" placeholder=\"Entrer l'adresse de l'institution..\" autoComplete=\"adresse\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer l'adresse de l'institution</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Téléphone 1:\" name=\"telephone1\" type=\"text\" placeholder=\"Entrer un numéro de téléphone...\" autoComplete=\"telephone1\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer un numéro de téléphone de l'institution</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Téléphone 2:\" name=\"telephone2\" type=\"text\" placeholder=\"Entrer un auntre numéro de téléphone...\" autoComplete=\"telephone2\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer un autre numéro de téléphone de l'institution</CFormText>\r\n                      </CFormGroup>\r\n                    </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n            <CCol xs=\"12\" sm=\"6\">\r\n              <CCard> \r\n                  <CCardHeader>\r\n                  Informations sur l'institution   {  match.params.id}\r\n                 </CCardHeader>\r\n                    <CCardBody>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Email*:\" name=\"email\" type=\"text\" placeholder=\"Enter l'email de l'institution...\" autoComplete=\"email\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer l'email de l'institution</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                          <TextField label=\"Site web:\" name=\"siteWeb\" type=\"text\" placeholder=\"Entrer le site web de l'institution...\" autoComplete=\"siteWeb\" />\r\n                          <CFormText className=\"help-block\">Veuillez entrer le site web de l'institution</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Numéro social:\" name=\"numeroFiscal\" type=\"text\" placeholder=\"Entrer le numéro social de l'institution..\" autoComplete=\"numeroFiscal\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer le numéro social de l'intitution</CFormText>\r\n                      </CFormGroup>\r\n                      <CFormGroup>\r\n                        <TextField label=\"Description:\" type=\"textarea\" name=\"description\" placeholder=\"Entrer la description de téléphone...\" autoComplete=\"description\"/>\r\n                        <CFormText className=\"help-block\">Veuillez entrer la description de l'institution</CFormText>\r\n                      </CFormGroup>      \r\n                    </CCardBody>\r\n                    <CCardFooter>\r\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\"\r\n                      disabled={loadingState}\r\n                      >{match.params.id ? 'Modifier': 'Enregistrer'}\r\n                      <ClipLoader loading={loadingState} size={15} />\r\n                      </button>\r\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset'>Réinitialiser</button>\r\n                    </CCardFooter>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n       </Form>\r\n        </div>    \r\n      )\r\n      }\r\n    </Formik>   \r\n    {/* SHOW SUCCES */}\r\n    <CCol sm=\"12\" lg=\"6\">\r\n      <CToaster\r\n        position={'top-right'}\r\n      > \r\n            <CToast\r\n              show={show}\r\n              autohide={true && 4000}\r\n              fade={true}\r\n            >\r\n              <CToastHeader closeButton={true}>\r\n              <CBadge className=\"mr-1\" color=\"success\">SUCCÈS</CBadge>              \r\n              </CToastHeader>\r\n              <CToastBody  color=\"success\">\r\n                Opération réussie !\r\n              </CToastBody>\r\n            </CToast>\r\n      </CToaster>\r\n    </CCol>\r\n\r\n      {/* SHOW ERROR */}\r\n      <CCol sm=\"12\" lg=\"6\">\r\n      <CToaster\r\n        position={'top-right'}\r\n      > \r\n            <CToast\r\n              show={showError}\r\n              autohide={true && 4000}\r\n              fade={true}\r\n            >\r\n              <CToastHeader closeButton={true}>\r\n              <CBadge className=\"mr-1\" color=\"danger\">ECHEC</CBadge>              \r\n              </CToastHeader>\r\n              <CToastBody  color=\"danger\">\r\n                Echec de l'opération. Veuillez essayer plus tard !\r\n              </CToastBody>\r\n            </CToast>\r\n      </CToaster>\r\n    </CCol>\r\n  </div>\r\n  )\r\n}\r\nexport default BasicForms\r\n"],"sourceRoot":""}